<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>D.TopZ</title>
  
  <subtitle>青春猪头好少年</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://deletee.top/"/>
  <updated>2019-08-13T01:16:39.539Z</updated>
  <id>http://deletee.top/</id>
  
  <author>
    <name>deletee</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Flink学习笔记01-&gt;Mac下部署flink并构建简单程序</title>
    <link href="http://deletee.top/2019/08/11/flink-learning-notes-02/"/>
    <id>http://deletee.top/2019/08/11/flink-learning-notes-02/</id>
    <published>2019-08-11T02:55:30.000Z</published>
    <updated>2019-08-13T01:16:39.539Z</updated>
    
    <content type="html"><![CDATA[<h4 id="说在前面的话"><a href="#说在前面的话" class="headerlink" title="说在前面的话"></a>说在前面的话</h4><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;随着Flink大数据平台快速发展及日益成熟，公司也逐步利用Flink来解决业务问题，之前也学过Scala，Spark，由于本人在实际工作中应用场景较少，基本上又忘了。本次利用一个月的时间，每天更新一篇自学笔记用以记录及知识分享。<br><img src="/knowledge/flink-logo.jpeg =601x361" alt=""><br><a id="more"></a></p><h4 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">jdk-1.8</span><br><span class="line">flink-1.6.0</span><br></pre></td></tr></table></figure><p>Mac 下安装 flink<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew install apache-flink</span><br></pre></td></tr></table></figure></p><p>若是网络不好的话，可能会下载非常慢（brew下载未完成的文件后缀为.incomplete）或是失败，可以把brew待下载的包通过其他渠道先下载到cache路径下<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">deletee [~] → brew --cache</span><br><span class="line">/Users/deletee/Library/Caches/Homebrew</span><br></pre></td></tr></table></figure></p><p>具体操作思路：</p><p><a href="https://archive.apache.org/dist/flink/flink-1.6.0/flink-1.6.0-bin-hadoop27-scala_2.11.tgz" target="_blank" rel="noopener">点击下载 flink安装包</a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">1：  <span class="comment"># brew install apache-flink</span></span><br><span class="line"></span><br><span class="line">以上命令会提示开始下载一个文件，但进度很慢。半个小时过去了，才到30%。</span><br><span class="line">复制上面的下载链接，使用其它下载工具下载。例如使用迅雷，可以在5分钟左右下载完成，也可以尝试配合vpn下载。加速下载的办法大家都是各有绝招，根据自己的环境选择最快的一种下载方式即可。</span><br><span class="line"></span><br><span class="line">2：找到brew下载文件的目录，将刚才下载的文件移动到目录</span><br><span class="line">    <span class="comment"># cd `brew --cache`</span></span><br><span class="line">     //进入brew的下载目录 </span><br><span class="line">    <span class="comment"># rm apache-flink-1.6.0.tar.gz.incomplete</span></span><br><span class="line">     //删除刚才下载一半的文件</span><br><span class="line">    <span class="comment"># mv apache-flink-1.6.0.tar.gz ./</span></span><br><span class="line">    //将下载好的压缩包放到brew下载目录</span><br><span class="line">3：继续执行：brw install apache-flink</span><br></pre></td></tr></table></figure><p>安装之后，可以通过命令进行验证<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">deletee [~] → flink -v</span><br><span class="line">Version: 1.6.0, Commit ID: ff472b4</span><br></pre></td></tr></table></figure></p><p>那么安装好的flink在什么位置呢？<code>/usr/local/Cellar/apache-flink/1.6.0/</code><br>我们配置下FLINK_HOME, <code>vim ~/.bashrc</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">export</span> FLINK_HOME=/usr/<span class="built_in">local</span>/Cellar/apache-flink/1.6.0/</span><br></pre></td></tr></table></figure><h4 id="启动Flink"><a href="#启动Flink" class="headerlink" title="启动Flink"></a>启动Flink</h4><p>一键启动</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">→ <span class="built_in">cd</span> <span class="variable">$FLINK_HOME</span>/libexec                                                                                                                            [ac229f9]</span><br><span class="line">deletee [apache-flink/1.6.0/libexec]$: bin/start-cluster.sh                                                                                                                              [ac229f9]</span><br><span class="line">Starting cluster.</span><br><span class="line">Starting standalonesession daemon on host localhost.</span><br><span class="line">Starting taskexecutor daemon on host localhost.</span><br></pre></td></tr></table></figure><p>是的，可以通过$FLINK_HOME/libexec 路径下 bin目录下 启动脚本来启动 flink</p><p>此时可以通过浏览器访问: <a href="http://localhost:8081" target="_blank" rel="noopener">http://localhost:8081</a> 访问flink web界面</p><p><img src="/knowledge/flink-install-check.jpg" alt=""></p><h4 id="构建Flink-Maven-工程"><a href="#构建Flink-Maven-工程" class="headerlink" title="构建Flink Maven 工程"></a>构建Flink Maven 工程</h4><p><strong>简要说明</strong></p><p>​        Demo是接收套接字输入流进行分词计数。</p><p><img src="/knowledge/flink-maven-java-create.jpg" alt=""></p><p>工程信息</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.hz.deletee<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>flink-learning<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>pom.xml</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns</span>=<span class="string">"http://maven.apache.org/POM/4.0.0"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.hz.deletee<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>flink-learning<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-compiler-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">source</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">source</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">target</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">target</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.build.sourceEncoding</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">flink.version</span>&gt;</span>1.6.0<span class="tag">&lt;/<span class="name">flink.version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scala.binary.version</span>&gt;</span>2.11<span class="tag">&lt;/<span class="name">scala.binary.version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scala.version</span>&gt;</span>2.11.12<span class="tag">&lt;/<span class="name">scala.version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maven.build.timestamp.format</span>&gt;</span>yyyyMMddHHmmss<span class="tag">&lt;/<span class="name">maven.build.timestamp.format</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.flink<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>flink-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;flink.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.flink<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>flink-streaming-java_2.11<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;flink.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.flink<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>flink-clients_2.11<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;flink.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- Add connector dependencies here. They must be in the default scope (compile). --&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.flink<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>flink-connector-kafka-0.11_2.11<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;flink.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">exclusions</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>*<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.slf4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>slf4j-log4j12<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- Add logging framework, to produce console output when running in the IDE. --&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- These dependencies are excluded from the application JAR by default. --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.slf4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>slf4j-log4j12<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.7.7<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.17<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>code</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.hz.detelee.x01;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.flink.api.common.functions.FlatMapFunction;</span><br><span class="line"><span class="keyword">import</span> org.apache.flink.api.java.tuple.Tuple2;</span><br><span class="line"><span class="keyword">import</span> org.apache.flink.streaming.api.datastream.DataStreamSource;</span><br><span class="line"><span class="keyword">import</span> org.apache.flink.streaming.api.datastream.SingleOutputStreamOperator;</span><br><span class="line"><span class="keyword">import</span> org.apache.flink.streaming.api.environment.StreamExecutionEnvironment;</span><br><span class="line"><span class="keyword">import</span> org.apache.flink.util.Collector;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SocketTextStreamWordCount</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">//参数检查</span></span><br><span class="line">        <span class="keyword">if</span> (args.length != <span class="number">2</span>) &#123;</span><br><span class="line">            System.err.println(<span class="string">"USAGE:\nSocketTextStreamWordCount &lt;hostname&gt; &lt;port&gt;"</span>);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        String hostname = args[<span class="number">0</span>];</span><br><span class="line">        Integer port = Integer.parseInt(args[<span class="number">1</span>]);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">// set up the streaming execution environment</span></span><br><span class="line">        <span class="keyword">final</span> StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取数据</span></span><br><span class="line">        DataStreamSource&lt;String&gt; stream = env.socketTextStream(hostname, port);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//计数</span></span><br><span class="line">        SingleOutputStreamOperator&lt;Tuple2&lt;String, Integer&gt;&gt; sum = stream.flatMap(<span class="keyword">new</span> LineSplitter())</span><br><span class="line">                .keyBy(<span class="number">0</span>)</span><br><span class="line">                .sum(<span class="number">1</span>);</span><br><span class="line">        sum.print();</span><br><span class="line">        env.execute(<span class="string">"Java WordCount from SocketTextStream Example"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">LineSplitter</span> <span class="keyword">implements</span> <span class="title">FlatMapFunction</span>&lt;<span class="title">String</span>, <span class="title">Tuple2</span>&lt;<span class="title">String</span>, <span class="title">Integer</span>&gt;&gt; </span>&#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">flatMap</span><span class="params">(String s, Collector&lt;Tuple2&lt;String, Integer&gt;&gt; collector)</span> </span>&#123;</span><br><span class="line">            String[] tokens = s.toLowerCase().split(<span class="string">"\\W+"</span>);</span><br><span class="line">            <span class="keyword">for</span> (String token: tokens) &#123;</span><br><span class="line">                <span class="keyword">if</span> (token.length() &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                    collector.collect(<span class="keyword">new</span> Tuple2&lt;String, Integer&gt;(token, <span class="number">1</span>));</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>编译</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mvn clean package -Dmaven.skpi.test=true</span><br></pre></td></tr></table></figure><p><strong>执行</strong><br>开启数据入监听</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 开启输入流 端口监听</span></span><br><span class="line">nc -kl 9000</span><br></pre></td></tr></table></figure><p>运行程序<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flink run -c org.hz.detelee.x01.SocketTextStreamWordCount flink-learning-1.0-SNAPSHOT.jar 127.0.0.1 9000</span><br></pre></td></tr></table></figure></p><p>查看结果日志<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd $FLINK_HOME/libexec/log/</span><br><span class="line">tail -f flink-deletee-taskexecutor-0-localhost.out</span><br></pre></td></tr></table></figure></p><p><img src="/knowledge/flink-run-result.jpg" alt=""></p>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;说在前面的话&quot;&gt;&lt;a href=&quot;#说在前面的话&quot; class=&quot;headerlink&quot; title=&quot;说在前面的话&quot;&gt;&lt;/a&gt;说在前面的话&lt;/h4&gt;&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;随着Flink大数据平台快速发展及日益成熟，公司也逐步利用Flink来解决业务问题，之前也学过Scala，Spark，由于本人在实际工作中应用场景较少，基本上又忘了。本次利用一个月的时间，每天更新一篇自学笔记用以记录及知识分享。&lt;br&gt;&lt;img src=&quot;/knowledge/flink-logo.jpeg =601x361&quot; alt=&quot;&quot;&gt;&lt;br&gt;
    
    </summary>
    
      <category term="1x 技术综合篇" scheme="http://deletee.top/categories/1x-%E6%8A%80%E6%9C%AF%E7%BB%BC%E5%90%88%E7%AF%87/"/>
    
      <category term="1x2 技术平台" scheme="http://deletee.top/categories/1x-%E6%8A%80%E6%9C%AF%E7%BB%BC%E5%90%88%E7%AF%87/1x2-%E6%8A%80%E6%9C%AF%E5%B9%B3%E5%8F%B0/"/>
    
      <category term="1x23 Flink" scheme="http://deletee.top/categories/1x-%E6%8A%80%E6%9C%AF%E7%BB%BC%E5%90%88%E7%AF%87/1x2-%E6%8A%80%E6%9C%AF%E5%B9%B3%E5%8F%B0/1x23-Flink/"/>
    
    
      <category term="hbase" scheme="http://deletee.top/tags/hbase/"/>
    
  </entry>
  
  <entry>
    <title>Flink学习笔记01-&gt;Mac下部署flink并构建简单程序</title>
    <link href="http://deletee.top/2019/08/11/flink-learning-notes-01/"/>
    <id>http://deletee.top/2019/08/11/flink-learning-notes-01/</id>
    <published>2019-08-11T02:55:30.000Z</published>
    <updated>2019-08-13T00:55:42.146Z</updated>
    
    <content type="html"><![CDATA[<p>说在前面的话</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;随着Flink大数据平台快速发展及日益成熟，公司也逐步利用Flink来解决业务问题，之前也学过Scala，Spark，由于本人在实际工作中应用场景较少，基本上又忘了。本次利用一个月的时间，每天更新一篇自学笔记用以记录及知识分享。</p><a id="more"></a><h4 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">jdk-1.8</span><br><span class="line">flink-1.6.0</span><br></pre></td></tr></table></figure><p>Mac 下安装 flink<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew install apache-flink</span><br></pre></td></tr></table></figure></p><p>若是网络不好的话，可能会下载非常慢（brew下载未完成的文件后缀为.incomplete）或是失败，可以把brew待下载的包通过其他渠道先下载到cache路径下<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">deletee [~] → brew --cache</span><br><span class="line">/Users/deletee/Library/Caches/Homebrew</span><br></pre></td></tr></table></figure></p><p>具体操作思路：</p><p><a href="https://archive.apache.org/dist/flink/flink-1.6.0/flink-1.6.0-bin-hadoop27-scala_2.11.tgz" target="_blank" rel="noopener">点击下载 flink安装包</a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">1：  <span class="comment"># brew install apache-flink</span></span><br><span class="line"></span><br><span class="line">以上命令会提示开始下载一个文件，但进度很慢。半个小时过去了，才到30%。</span><br><span class="line">复制上面的下载链接，使用其它下载工具下载。例如使用迅雷，可以在5分钟左右下载完成，也可以尝试配合vpn下载。加速下载的办法大家都是各有绝招，根据自己的环境选择最快的一种下载方式即可。</span><br><span class="line"></span><br><span class="line">2：找到brew下载文件的目录，将刚才下载的文件移动到目录</span><br><span class="line">    <span class="comment"># cd `brew --cache`</span></span><br><span class="line">     //进入brew的下载目录 </span><br><span class="line">    <span class="comment"># rm apache-flink-1.6.0.tar.gz.incomplete</span></span><br><span class="line">     //删除刚才下载一半的文件</span><br><span class="line">    <span class="comment"># mv apache-flink-1.6.0.tar.gz ./</span></span><br><span class="line">    //将下载好的压缩包放到brew下载目录</span><br><span class="line">3：继续执行：brw install apache-flink</span><br></pre></td></tr></table></figure><p>安装之后，可以通过命令进行验证<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">deletee [~] → flink -v</span><br><span class="line">Version: 1.6.0, Commit ID: ff472b4</span><br></pre></td></tr></table></figure></p><p>那么安装好的flink在什么位置呢？<code>/usr/local/Cellar/apache-flink/1.6.0/</code><br>我们配置下FLINK_HOME, <code>vim ~/.bashrc</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">export</span> FLINK_HOME=/usr/<span class="built_in">local</span>/Cellar/apache-flink/1.6.0/</span><br></pre></td></tr></table></figure><h4 id="启动Flink"><a href="#启动Flink" class="headerlink" title="启动Flink"></a>启动Flink</h4><p>一键启动</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">→ <span class="built_in">cd</span> <span class="variable">$FLINK_HOME</span>/libexec                                                                                                                            [ac229f9]</span><br><span class="line">deletee [apache-flink/1.6.0/libexec]$: bin/start-cluster.sh                                                                                                                              [ac229f9]</span><br><span class="line">Starting cluster.</span><br><span class="line">Starting standalonesession daemon on host localhost.</span><br><span class="line">Starting taskexecutor daemon on host localhost.</span><br></pre></td></tr></table></figure><p>是的，可以通过$FLINK_HOME/libexec 路径下 bin目录下 启动脚本来启动 flink</p><p>此时可以通过浏览器访问: <a href="http://localhost:8081" target="_blank" rel="noopener">http://localhost:8081</a> 访问flink web界面</p><p><img src="/knowledge/flink-install-check.jpg" alt=""></p><h4 id="构建Flink-Maven-工程-flink-java"><a href="#构建Flink-Maven-工程-flink-java" class="headerlink" title="构建Flink Maven 工程 (flink-java)"></a>构建Flink Maven 工程 (flink-java)</h4><p><strong>简要说明</strong></p><p>​        Demo是接收套接字输入流进行分词计数。</p><p><img src="/knowledge/flink-maven-java-create.jpg" alt=""></p><p>工程信息</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.hz.deletee<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>flink-learning<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>pom.xml</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns</span>=<span class="string">"http://maven.apache.org/POM/4.0.0"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.hz.deletee<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>flink-learning<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-compiler-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">source</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">source</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">target</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">target</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.build.sourceEncoding</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">flink.version</span>&gt;</span>1.6.0<span class="tag">&lt;/<span class="name">flink.version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scala.binary.version</span>&gt;</span>2.11<span class="tag">&lt;/<span class="name">scala.binary.version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scala.version</span>&gt;</span>2.11.12<span class="tag">&lt;/<span class="name">scala.version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maven.build.timestamp.format</span>&gt;</span>yyyyMMddHHmmss<span class="tag">&lt;/<span class="name">maven.build.timestamp.format</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.flink<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>flink-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;flink.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.flink<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>flink-streaming-java_2.11<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;flink.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.flink<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>flink-clients_2.11<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;flink.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- Add connector dependencies here. They must be in the default scope (compile). --&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.flink<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>flink-connector-kafka-0.11_2.11<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;flink.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">exclusions</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>*<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.slf4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>slf4j-log4j12<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- Add logging framework, to produce console output when running in the IDE. --&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- These dependencies are excluded from the application JAR by default. --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.slf4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>slf4j-log4j12<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.7.7<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.17<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>code</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.hz.detelee.x01;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.flink.api.common.functions.FlatMapFunction;</span><br><span class="line"><span class="keyword">import</span> org.apache.flink.api.java.tuple.Tuple2;</span><br><span class="line"><span class="keyword">import</span> org.apache.flink.streaming.api.datastream.DataStreamSource;</span><br><span class="line"><span class="keyword">import</span> org.apache.flink.streaming.api.datastream.SingleOutputStreamOperator;</span><br><span class="line"><span class="keyword">import</span> org.apache.flink.streaming.api.environment.StreamExecutionEnvironment;</span><br><span class="line"><span class="keyword">import</span> org.apache.flink.util.Collector;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SocketTextStreamWordCount</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">//参数检查</span></span><br><span class="line">        <span class="keyword">if</span> (args.length != <span class="number">2</span>) &#123;</span><br><span class="line">            System.err.println(<span class="string">"USAGE:\nSocketTextStreamWordCount &lt;hostname&gt; &lt;port&gt;"</span>);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        String hostname = args[<span class="number">0</span>];</span><br><span class="line">        Integer port = Integer.parseInt(args[<span class="number">1</span>]);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">// set up the streaming execution environment</span></span><br><span class="line">        <span class="keyword">final</span> StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取数据</span></span><br><span class="line">        DataStreamSource&lt;String&gt; stream = env.socketTextStream(hostname, port);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//计数</span></span><br><span class="line">        SingleOutputStreamOperator&lt;Tuple2&lt;String, Integer&gt;&gt; sum = stream.flatMap(<span class="keyword">new</span> LineSplitter())</span><br><span class="line">                .keyBy(<span class="number">0</span>)</span><br><span class="line">                .sum(<span class="number">1</span>);</span><br><span class="line">        sum.print();</span><br><span class="line">        env.execute(<span class="string">"Java WordCount from SocketTextStream Example"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">LineSplitter</span> <span class="keyword">implements</span> <span class="title">FlatMapFunction</span>&lt;<span class="title">String</span>, <span class="title">Tuple2</span>&lt;<span class="title">String</span>, <span class="title">Integer</span>&gt;&gt; </span>&#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">flatMap</span><span class="params">(String s, Collector&lt;Tuple2&lt;String, Integer&gt;&gt; collector)</span> </span>&#123;</span><br><span class="line">            String[] tokens = s.toLowerCase().split(<span class="string">"\\W+"</span>);</span><br><span class="line">            <span class="keyword">for</span> (String token: tokens) &#123;</span><br><span class="line">                <span class="keyword">if</span> (token.length() &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                    collector.collect(<span class="keyword">new</span> Tuple2&lt;String, Integer&gt;(token, <span class="number">1</span>));</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>编译</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mvn clean package -Dmaven.skpi.test=true</span><br></pre></td></tr></table></figure><p><strong>执行</strong><br>开启数据入监听</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 开启输入流 端口监听</span></span><br><span class="line">nc -kl 9000</span><br></pre></td></tr></table></figure><p>运行程序<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flink run -c org.hz.detelee.x01.SocketTextStreamWordCount flink-learning-1.0-SNAPSHOT.jar 127.0.0.1 9000</span><br></pre></td></tr></table></figure></p><p>查看结果日志<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd $FLINK_HOME/libexec/log/</span><br><span class="line">tail -f flink-deletee-taskexecutor-0-localhost.out</span><br></pre></td></tr></table></figure></p><p><img src="/knowledge/flink-run-result.jpg" alt=""></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;说在前面的话&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;随着Flink大数据平台快速发展及日益成熟，公司也逐步利用Flink来解决业务问题，之前也学过Scala，Spark，由于本人在实际工作中应用场景较少，基本上又忘了。本次利用一个月的时间，每天更新一篇自学笔记用以记录及知识分享。&lt;/p&gt;
    
    </summary>
    
      <category term="1x 技术综合篇" scheme="http://deletee.top/categories/1x-%E6%8A%80%E6%9C%AF%E7%BB%BC%E5%90%88%E7%AF%87/"/>
    
      <category term="1x2 技术平台" scheme="http://deletee.top/categories/1x-%E6%8A%80%E6%9C%AF%E7%BB%BC%E5%90%88%E7%AF%87/1x2-%E6%8A%80%E6%9C%AF%E5%B9%B3%E5%8F%B0/"/>
    
      <category term="1x23 Flink" scheme="http://deletee.top/categories/1x-%E6%8A%80%E6%9C%AF%E7%BB%BC%E5%90%88%E7%AF%87/1x2-%E6%8A%80%E6%9C%AF%E5%B9%B3%E5%8F%B0/1x23-Flink/"/>
    
    
      <category term="hbase" scheme="http://deletee.top/tags/hbase/"/>
    
  </entry>
  
  <entry>
    <title>Git创建与合并分支</title>
    <link href="http://deletee.top/2019/04/11/git-repository/"/>
    <id>http://deletee.top/2019/04/11/git-repository/</id>
    <published>2019-04-11T07:46:30.000Z</published>
    <updated>2019-04-11T04:53:43.744Z</updated>
    
    <content type="html"><![CDATA[<p>什么是版本库呢？版本库又名仓库，英文名<strong>repository</strong>，你可以简单理解成一个目录，这个目录里面的所有文件都可以被Git管理起来，每个文件的修改、删除，Git都能跟踪，以便任何时刻都可以追踪历史，或者在将来某个时刻可以“还原”。</p><a id="more"></a><p>所以，创建一个版本库非常简单，首先，选择一个合适的地方，创建一个空目录：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ mkdir learngit</span><br><span class="line">$ cd learngit</span><br><span class="line">$ pwd</span><br><span class="line">/Users/michael/learngit</span><br></pre></td></tr></table></figure><p><code>pwd</code>命令用于显示当前目录。在我的Mac上，这个仓库位于<code>/Users/michael/learngit</code>。</p><p> 如果你使用Windows系统，为了避免遇到各种莫名其妙的问题，请确保目录名（包括父目录）不包含中文。</p><p>第二步，通过<code>git init</code>命令把这个目录变成Git可以管理的仓库：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git init</span><br><span class="line">Initialized empty Git repository in /Users/michael/learngit/.git/</span><br></pre></td></tr></table></figure><p>瞬间Git就把仓库建好了，而且告诉你是一个空的仓库（empty Git repository），细心的读者可以发现当前目录下多了一个<code>.git</code>的目录，这个目录是Git来跟踪管理版本库的，没事千万不要手动修改这个目录里面的文件，不然改乱了，就把Git仓库给破坏了。</p><p>如果你没有看到<code>.git</code>目录，那是因为这个目录默认是隐藏的，用<code>ls -ah</code>命令就可以看见。</p><video width="100%" controls style="vertical-align: middle; max-width: 100%; height: auto; box-sizing: border-box; color: rgb(58, 58, 58); font-family: STHeitiSC-Light; font-size: 16px; font-style: normal; font-variant-ligatures: normal; font-variant-caps: normal; font-weight: 400; letter-spacing: normal; orphans: 2; text-align: start; text-indent: 0px; text-transform: none; white-space: normal; widows: 2; word-spacing: 0px; -webkit-text-stroke-width: 0px; background-color: rgb(255, 255, 255); text-decoration-style: initial; text-decoration-color: initial;"></video><p>也不一定必须在空目录下创建Git仓库，选择一个已经有东西的目录也是可以的。不过，不建议你使用自己正在开发的公司项目来学习Git，否则造成的一切后果概不负责。</p><h3 id="把文件添加到版本库"><a href="#把文件添加到版本库" class="headerlink" title="把文件添加到版本库"></a>把文件添加到版本库</h3><p>首先这里再明确一下，所有的版本控制系统，其实只能跟踪文本文件的改动，比如TXT文件，网页，所有的程序代码等等，Git也不例外。版本控制系统可以告诉你每次的改动，比如在第5行加了一个单词“Linux”，在第8行删了一个单词“Windows”。而图片、视频这些二进制文件，虽然也能由版本控制系统管理，但没法跟踪文件的变化，只能把二进制文件每次改动串起来，也就是只知道图片从100KB改成了120KB，但到底改了啥，版本控制系统不知道，也没法知道。</p><p>不幸的是，Microsoft的Word格式是二进制格式，因此，版本控制系统是没法跟踪Word文件的改动的，前面我们举的例子只是为了演示，如果要真正使用版本控制系统，就要以纯文本方式编写文件。</p><p>因为文本是有编码的，比如中文有常用的GBK编码，日文有Shift_JIS编码，如果没有历史遗留问题，强烈建议使用标准的UTF-8编码，所有语言使用同一种编码，既没有冲突，又被所有平台所支持。</p><p>使用Windows的童鞋要特别注意：</p><p>千万不要使用Windows自带的<strong>记事本</strong>编辑任何文本文件。原因是Microsoft开发记事本的团队使用了一个非常弱智的行为来保存UTF-8编码的文件，他们自作聪明地在每个文件开头添加了0xefbbbf（十六进制）的字符，你会遇到很多不可思议的问题，比如，网页第一行可能会显示一个“?”，明明正确的程序一编译就报语法错误，等等，都是由记事本的弱智行为带来的。建议你下载<a href="http://notepad-plus-plus.org/" target="_blank" rel="noopener">Notepad++</a>代替记事本，不但功能强大，而且免费！记得把Notepad++的默认编码设置为UTF-8 without BOM即可：</p><p><img src="https://cdn.liaoxuefeng.com/cdn/files/attachments/001384907170801199e153159cc4a438bed8d255edf157a000/0" alt="set-utf8-notepad++"></p><p>言归正传，现在我们编写一个<code>readme.txt</code>文件，内容如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Git is a version control system.</span><br><span class="line">Git is free software.</span><br></pre></td></tr></table></figure><p>一定要放到<code>learngit</code>目录下（子目录也行），因为这是一个Git仓库，放到其他地方Git再厉害也找不到这个文件。</p><p>和把大象放到冰箱需要3步相比，把一个文件放到Git仓库只需要两步。</p><p>第一步，用命令<code>git add</code>告诉Git，把文件添加到仓库：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git add readme.txt</span><br></pre></td></tr></table></figure><p>执行上面的命令，没有任何显示，这就对了，Unix的哲学是“没有消息就是好消息”，说明添加成功。</p><p>第二步，用命令<code>git commit</code>告诉Git，把文件提交到仓库：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ git commit -m &quot;wrote a readme file&quot;</span><br><span class="line">[master (root-commit) eaadf4e] wrote a readme file</span><br><span class="line"> 1 file changed, 2 insertions(+)</span><br><span class="line"> create mode 100644 readme.txt</span><br></pre></td></tr></table></figure><p>简单解释一下<code>git commit</code>命令，<code>-m</code>后面输入的是本次提交的说明，可以输入任意内容，当然最好是有意义的，这样你就能从历史记录里方便地找到改动记录。</p><p>嫌麻烦不想输入<code>-m &quot;xxx&quot;</code>行不行？确实有办法可以这么干，但是强烈不建议你这么干，因为输入说明对自己对别人阅读都很重要。实在不想输入说明的童鞋请自行Google，我不告诉你这个参数。</p><p><code>git commit</code>命令执行成功后会告诉你，<code>1 file changed</code>：1个文件被改动（我们新添加的readme.txt文件）；<code>2 insertions</code>：插入了两行内容（readme.txt有两行内容）。</p><video width="100%" controls style="vertical-align: middle; max-width: 100%; height: auto; box-sizing: border-box; color: rgb(58, 58, 58); font-family: STHeitiSC-Light; font-size: 16px; font-style: normal; font-variant-ligatures: normal; font-variant-caps: normal; font-weight: 400; letter-spacing: normal; orphans: 2; text-align: start; text-indent: 0px; text-transform: none; white-space: normal; widows: 2; word-spacing: 0px; -webkit-text-stroke-width: 0px; background-color: rgb(255, 255, 255); text-decoration-style: initial; text-decoration-color: initial;"></video><p>为什么Git添加文件需要<code>add</code>，<code>commit</code>一共两步呢？因为<code>commit</code>可以一次提交很多文件，所以你可以多次<code>add</code>不同的文件，比如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ git add file1.txt</span><br><span class="line">$ git add file2.txt file3.txt</span><br><span class="line">$ git commit -m &quot;add 3 files.&quot;</span><br></pre></td></tr></table></figure><h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><p>现在总结一下今天学的两点内容：</p><p>初始化一个Git仓库，使用<code>git init</code>命令。</p><p>添加文件到Git仓库，分两步：</p><ol><li>使用命令<code>git add &lt;file&gt;</code>，注意，可反复多次使用，添加多个文件；</li><li>使用命令<code>git commit -m &lt;message&gt;</code>，完成。</li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;什么是版本库呢？版本库又名仓库，英文名&lt;strong&gt;repository&lt;/strong&gt;，你可以简单理解成一个目录，这个目录里面的所有文件都可以被Git管理起来，每个文件的修改、删除，Git都能跟踪，以便任何时刻都可以追踪历史，或者在将来某个时刻可以“还原”。&lt;/p&gt;
    
    </summary>
    
      <category term="1x 技术综合篇" scheme="http://deletee.top/categories/1x-%E6%8A%80%E6%9C%AF%E7%BB%BC%E5%90%88%E7%AF%87/"/>
    
      <category term="1x0 开发语言" scheme="http://deletee.top/categories/1x-%E6%8A%80%E6%9C%AF%E7%BB%BC%E5%90%88%E7%AF%87/1x0-%E5%BC%80%E5%8F%91%E8%AF%AD%E8%A8%80/"/>
    
      <category term="1x02 Git管理" scheme="http://deletee.top/categories/1x-%E6%8A%80%E6%9C%AF%E7%BB%BC%E5%90%88%E7%AF%87/1x0-%E5%BC%80%E5%8F%91%E8%AF%AD%E8%A8%80/1x02-Git%E7%AE%A1%E7%90%86/"/>
    
    
      <category term="shell" scheme="http://deletee.top/tags/shell/"/>
    
      <category term="awk" scheme="http://deletee.top/tags/awk/"/>
    
  </entry>
  
  <entry>
    <title>Git简介</title>
    <link href="http://deletee.top/2019/04/11/git-brief/"/>
    <id>http://deletee.top/2019/04/11/git-brief/</id>
    <published>2019-04-11T07:46:30.000Z</published>
    <updated>2019-04-11T04:49:33.112Z</updated>
    
    <content type="html"><![CDATA[<p>Git是什么？</p><p>Git是目前世界上最先进的分布式版本控制系统（没有之一）。</p><p>Git有什么特点？简单来说就是：高端大气上档次！</p><p>那什么是版本控制系统？</p><p>如果你用Microsoft Word写过长篇大论，那你一定有这样的经历：</p><p>想删除一个段落，又怕将来想恢复找不回来怎么办？有办法，先把当前文件“另存为……”一个新的Word文件，再接着改，改到一定程度，再“另存为……”一个新文件，这样一直改下去，最后你的Word文档变成了这样：</p><p><img src="https://cdn.liaoxuefeng.com/cdn/files/attachments/0013848606651673ff1c83932d249118bf8fd5c58c15ca2000/0" alt="lots-of-docs"></p><a id="more"></a><p>过了一周，你想找回被删除的文字，但是已经记不清删除前保存在哪个文件里了，只好一个一个文件去找，真麻烦。</p><p>看着一堆乱七八糟的文件，想保留最新的一个，然后把其他的删掉，又怕哪天会用上，还不敢删，真郁闷。</p><p>更要命的是，有些部分需要你的财务同事帮助填写，于是你把文件Copy到U盘里给她（也可能通过Email发送一份给她），然后，你继续修改Word文件。一天后，同事再把Word文件传给你，此时，你必须想想，发给她之后到你收到她的文件期间，你作了哪些改动，得把你的改动和她的部分合并，真困难。</p><p>于是你想，如果有一个软件，不但能自动帮我记录每次文件的改动，还可以让同事协作编辑，这样就不用自己管理一堆类似的文件了，也不需要把文件传来传去。如果想查看某次改动，只需要在软件里瞄一眼就可以，岂不是很方便？</p><p>这个软件用起来就应该像这个样子，能记录每次文件的改动：</p><div class="table-container"><table><thead><tr><th style="text-align:left">版本</th><th style="text-align:left">文件名</th><th style="text-align:left">用户</th><th style="text-align:left">说明</th><th style="text-align:left">日期</th></tr></thead><tbody><tr><td style="text-align:left">1</td><td style="text-align:left">service.doc</td><td style="text-align:left">张三</td><td style="text-align:left">删除了软件服务条款5</td><td style="text-align:left">7/12 10:38</td></tr><tr><td style="text-align:left">2</td><td style="text-align:left">service.doc</td><td style="text-align:left">张三</td><td style="text-align:left">增加了License人数限制</td><td style="text-align:left">7/12 18:09</td></tr><tr><td style="text-align:left">3</td><td style="text-align:left">service.doc</td><td style="text-align:left">李四</td><td style="text-align:left">财务部门调整了合同金额</td><td style="text-align:left">7/13 9:51</td></tr><tr><td style="text-align:left">4</td><td style="text-align:left">service.doc</td><td style="text-align:left">张三</td><td style="text-align:left">延长了免费升级周期</td><td style="text-align:left">7/14 15:17</td></tr></tbody></table></div><p>这样，你就结束了手动管理多个“版本”的史前时代，进入到版本控制的20世纪。</p><h4 id="Git的诞生"><a href="#Git的诞生" class="headerlink" title="Git的诞生"></a>Git的诞生</h4><hr><p>很多人都知道，Linus在1991年创建了开源的Linux，从此，Linux系统不断发展，已经成为最大的服务器系统软件了。</p><p>Linus虽然创建了Linux，但Linux的壮大是靠全世界热心的志愿者参与的，这么多人在世界各地为Linux编写代码，那Linux的代码是如何管理的呢？</p><p>事实是，在2002年以前，世界各地的志愿者把源代码文件通过diff的方式发给Linus，然后由Linus本人通过手工方式合并代码！</p><p>你也许会想，为什么Linus不把Linux代码放到版本控制系统里呢？不是有CVS、SVN这些免费的版本控制系统吗？因为Linus坚定地反对CVS和SVN，这些集中式的版本控制系统不但速度慢，而且必须联网才能使用。有一些商用的版本控制系统，虽然比CVS、SVN好用，但那是付费的，和Linux的开源精神不符。</p><p>不过，到了2002年，Linux系统已经发展了十年了，代码库之大让Linus很难继续通过手工方式管理了，社区的弟兄们也对这种方式表达了强烈不满，于是Linus选择了一个商业的版本控制系统BitKeeper，BitKeeper的东家BitMover公司出于人道主义精神，授权Linux社区免费使用这个版本控制系统。</p><p>安定团结的大好局面在2005年就被打破了，原因是Linux社区牛人聚集，不免沾染了一些梁山好汉的江湖习气。开发Samba的Andrew试图破解BitKeeper的协议（这么干的其实也不只他一个），被BitMover公司发现了（监控工作做得不错！），于是BitMover公司怒了，要收回Linux社区的免费使用权。</p><p>Linus可以向BitMover公司道个歉，保证以后严格管教弟兄们，嗯，这是不可能的。实际情况是这样的：</p><p>Linus花了两周时间自己用C写了一个分布式版本控制系统，这就是Git！一个月之内，Linux系统的源码已经由Git管理了！牛是怎么定义的呢？大家可以体会一下。</p><p>Git迅速成为最流行的分布式版本控制系统，尤其是2008年，GitHub网站上线了，它为开源项目免费提供Git存储，无数开源项目开始迁移至GitHub，包括jQuery，PHP，Ruby等等。</p><p>历史就是这么偶然，如果不是当年BitMover公司威胁Linux社区，可能现在我们就没有免费而超级好用的Git了。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Git是什么？&lt;/p&gt;
&lt;p&gt;Git是目前世界上最先进的分布式版本控制系统（没有之一）。&lt;/p&gt;
&lt;p&gt;Git有什么特点？简单来说就是：高端大气上档次！&lt;/p&gt;
&lt;p&gt;那什么是版本控制系统？&lt;/p&gt;
&lt;p&gt;如果你用Microsoft Word写过长篇大论，那你一定有这样的经历：&lt;/p&gt;
&lt;p&gt;想删除一个段落，又怕将来想恢复找不回来怎么办？有办法，先把当前文件“另存为……”一个新的Word文件，再接着改，改到一定程度，再“另存为……”一个新文件，这样一直改下去，最后你的Word文档变成了这样：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://cdn.liaoxuefeng.com/cdn/files/attachments/0013848606651673ff1c83932d249118bf8fd5c58c15ca2000/0&quot; alt=&quot;lots-of-docs&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="1x 技术综合篇" scheme="http://deletee.top/categories/1x-%E6%8A%80%E6%9C%AF%E7%BB%BC%E5%90%88%E7%AF%87/"/>
    
      <category term="1x0 开发语言" scheme="http://deletee.top/categories/1x-%E6%8A%80%E6%9C%AF%E7%BB%BC%E5%90%88%E7%AF%87/1x0-%E5%BC%80%E5%8F%91%E8%AF%AD%E8%A8%80/"/>
    
      <category term="1x02 Git管理" scheme="http://deletee.top/categories/1x-%E6%8A%80%E6%9C%AF%E7%BB%BC%E5%90%88%E7%AF%87/1x0-%E5%BC%80%E5%8F%91%E8%AF%AD%E8%A8%80/1x02-Git%E7%AE%A1%E7%90%86/"/>
    
    
      <category term="shell" scheme="http://deletee.top/tags/shell/"/>
    
      <category term="awk" scheme="http://deletee.top/tags/awk/"/>
    
  </entry>
  
  <entry>
    <title>[转]职场晋升进阶宝典：都是知识点</title>
    <link href="http://deletee.top/2019/01/26/promotion-reply/"/>
    <id>http://deletee.top/2019/01/26/promotion-reply/</id>
    <published>2019-01-26T15:15:30.000Z</published>
    <updated>2019-01-26T15:24:32.192Z</updated>
    
    <content type="html"><![CDATA[<p>时间眨眼到了5月，阿里人最近都在忙什么呢？橙子去公司内网看了看，发现“晋升”已经成了热搜词。</p><p><strong>晋升，可不是你想象中简单的升职加薪哦。</strong></p><p>它既是认可，也是期望。是对过去一段时间内，个人的能力成长和业务产出的认可；也是对今后的责任、付出提出了更高的要求和期望。听说面对压力，不少同学还是挺紧张的，这种关键时候，贴心的橙子自然会想方设法助大家一臂之力咯~你看，我千方百计找到了几大绝招哦！话说这绝招从哪儿学来的？</p><p>《晋升答辩的7个小技巧》是玉顺（玉顺，飞猪（阿里集团旗下旅行品牌）产品总监，曾就职于美国微软Bing、腾讯。）在2016年写的，同步发表在某社交平台，当时就被评为自媒体热文。今年这个时候恰逢晋升季，他就拿出来跟小伙伴们分享，本文略有删减 。</p><p><img src="/knowledge/ca35-hhtfwqq6752390.jpg" alt="ca35-hhtfwqq6752390"></p> <a id="more"></a><p><strong>01 展示你的核心能力。(Show your core competency, through projects)</strong></p><p>好多同学的答辩PPT都是按照时间排序，把自己做过的大大小小的项目罗列一遍。这样做最大的问题是目的不清楚，答辩本身不是评估项目，而是评估你这个人，评估你这个人的能力。</p><p>我首先要问你的一个问题就是，“你想要展示哪些核心能力？”</p><p>在答辩的准备上，你一定不能沉没到项目的细节里面，要跳出项目，仔细考虑自己的核心能力有哪些提升，如何把自己的核心能力表现出来。</p><p><strong>02 展示你的领导力。(Show leadership in small wins)</strong> </p><p>比如，你如果想在任何一个岗位上有出色的成绩，单靠完成工作是不够的，你需要展现“领导力”：主动承担、积极推动。这能让面试官相信，你可以承担更大更重要的责任。</p><p>有同学认为领导力是需要title才能发挥出来的，不，你不一定是Leader的title，各个通道的同学在平常的工作中，都可以展现领导力。</p><p>比如开发同学并没有等着产品经理来催进度、协调资源，而是主动和产品、前端、iOS、安卓的负责同学沟通，推动项目的进展和问题的解决，目标是在细分领域做到业界第一，这就是领导力。</p><p><strong>03 深入思考。(Think twice on “why”)</strong></p><p>我发现在面试中，有一类同学容易脱颖而出，他们往往在做过的项目中有自己较深入的思考。</p><p>比如同样一个项目，一个技术同学可能只记得写了多少行代码，完成了什么功能；另一个同学可以清晰地分析架构设计、可扩展性、容错，以及不同实现框架的对比，展现出了极强的思考能力。</p><p>这类深入思考的同学，比单纯只是执行的同学，能够承担更复杂和更重要的项目。</p><p>例如，每个产品创新，都需要产品经理站在整个行业生态的角度去考虑和布局，在做具体功能之前想清楚价值链的各个环节和价值洼地，想清楚了之后再来设计具体的场景和功能。</p><p>“Keep your feet on the ground, head above the cloud” ，这是我很喜欢一句话，也是鼓励大家多多思考，站在更高的角度和格局上去思考和提高。</p><p><strong>04 强调数据度量。 (Emphasize more on metrics, less on idea)</strong></p><p>在你的项目中，你如何采集数据、建立度量、分析数据，是表现你科学思考的重要手段。</p><p>有一些同学从心里会有点瞧不起做数据的工作，觉得更喜欢做产品功能开发，但是，数据分析和决策能力是一种非常重要的能力。现代的互联网开发讲究的是Growth hacking，它的核心是持续的数据驱动的产品设计和开发流程。Big data, A/B testing都是越来越普及的工具。</p><p>有时候有的同学找到我，请我做一个两难的决策，我问了几个问题往往就发现，他对数据的分析和采集不够；反过来，很多时候，这些数据出来了，不需要问我就已经可以找到清晰合理的方案了。</p><p>推荐一本书叫做“How To Measure Anything” ，可以帮助建立一套以数据驱动的决策体系，不管你是什么岗位，读一下都是很有好处的。</p><p><strong>05 知行合一。(Walk the talk, talk the walk)</strong></p><p>虽然每年的晋升机会是有限的，但职业能力的提升是一个持续的过程。每天进步一点点，3个月之后就会大不一样。</p><p>这里面的关键是，光知道是不够的，要去做，不断地做，不断地思考。做投资有一个重要的概念是复利，提高自己也是一样的，不断地积累，哪怕每次只有一点点，这个积累的力量是惊人的。</p><p>这里的英文标题我用的是Walk the talk, talk the walk. 它有两层意思，Walk the talk, 是实践你所知道的，talk the walk是讲你实践过的。平时你需要walk the talk,晋升评审的时候talk the walk，一切就变得很容易了。</p><p><strong>06 陈述要简洁。(KISS: Keep it Simple, Stupid)</strong></p><p>我看很多同学讲PPT有一个主要的问题，就是无关的内容太多。回到第一点，罗列内容和项目是没有用的，关键是你是否展示了你的核心能力。</p><p>网络接口设计中有一个重要的原则是KISS: Keep it simple, stupid. 你在讲PPT的时候也需要非常简洁， 只突出你的核心能力，整个PPT都是围绕你的核心能力组织和展开，你讲的每一句话都是围绕这一个目标。</p><p><strong>07 练习，练习，练习。(Practice, practice, practice)</strong></p><p>再好的演讲者也需要不断练习。乔布斯每次苹果发布会都要练习几十次，精益求精。对我们这些平时不太有机会演讲的产品和技术同学们，更加需要加倍的练习。</p><p>Stanford大学的教授Andrew Ng，是个美籍华人，刚加入Stanford的时候，因为不善言谈，讲课排名垫底，后来靠不断的有意识的练习，变成了最受欢迎的老师之一；他的机器学习课程也是Coursera上的最受欢迎的课程之一。我上过他的机器学习，讲解生动有趣，也让我坚定地相信，每一个同学都可以成为一个出色的演讲者，只是需要“练习，练习，练习”。</p><p><strong>在阿里有句老话：成长是自己的事儿。</strong></p><p>如果每一天都在重复着昨天，没有思考、总结和提升，那么你的人生就像荡秋千，只是在重复摇摆而已。</p><p><strong>蹲下来，是为了跳得更高。</strong></p><p>如果对照着“聪明、乐观、皮实、自省”这“四好青年”标准，你样样都达标很优秀了，那么晋升就是一个水到渠成的结果。 </p><p>没有比脚更长的路，没有比人更高的山，为了更好的自己，你我共勉。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;时间眨眼到了5月，阿里人最近都在忙什么呢？橙子去公司内网看了看，发现“晋升”已经成了热搜词。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;晋升，可不是你想象中简单的升职加薪哦。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;它既是认可，也是期望。是对过去一段时间内，个人的能力成长和业务产出的认可；也是对今后的责任、付出提出了更高的要求和期望。听说面对压力，不少同学还是挺紧张的，这种关键时候，贴心的橙子自然会想方设法助大家一臂之力咯~你看，我千方百计找到了几大绝招哦！话说这绝招从哪儿学来的？&lt;/p&gt;
&lt;p&gt;《晋升答辩的7个小技巧》是玉顺（玉顺，飞猪（阿里集团旗下旅行品牌）产品总监，曾就职于美国微软Bing、腾讯。）在2016年写的，同步发表在某社交平台，当时就被评为自媒体热文。今年这个时候恰逢晋升季，他就拿出来跟小伙伴们分享，本文略有删减 。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/knowledge/ca35-hhtfwqq6752390.jpg&quot; alt=&quot;ca35-hhtfwqq6752390&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="3x 职场篇" scheme="http://deletee.top/categories/3x-%E8%81%8C%E5%9C%BA%E7%AF%87/"/>
    
      <category term="3x1 职场宝典" scheme="http://deletee.top/categories/3x-%E8%81%8C%E5%9C%BA%E7%AF%87/3x1-%E8%81%8C%E5%9C%BA%E5%AE%9D%E5%85%B8/"/>
    
    
      <category term="职场" scheme="http://deletee.top/tags/%E8%81%8C%E5%9C%BA/"/>
    
  </entry>
  
  <entry>
    <title>2018年，自己做了什么？</title>
    <link href="http://deletee.top/2019/01/26/2018-summary/"/>
    <id>http://deletee.top/2019/01/26/2018-summary/</id>
    <published>2019-01-26T13:29:30.000Z</published>
    <updated>2019-01-26T15:27:18.964Z</updated>
    
    <content type="html"><![CDATA[<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;回想2018年，大部分日常工作是日志收集、数据统计、数据分析等工作，太过零碎有不能好好的展开，所以还是蛮纠结的。所以打算从可以提炼的日常以及唯一一个值得说道的项目：数据仓库机房迁移作为2018年完成的总结。</p><p><img src="/knowledge/001ouy5Qzy7qoMdlRc1e5.jpeg" alt="001ouy5Qzy7qoMdlRc1e5"></p><a id="more"></a><h4 id="0x1-数据仓库机房迁移"><a href="#0x1-数据仓库机房迁移" class="headerlink" title="0x1 数据仓库机房迁移"></a>0x1 数据仓库机房迁移</h4><h4 id="0x2-数据开发的日常"><a href="#0x2-数据开发的日常" class="headerlink" title="0x2 数据开发的日常"></a>0x2 数据开发的日常</h4><p>未完待续</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;回想2018年，大部分日常工作是日志收集、数据统计、数据分析等工作，太过零碎有不能好好的展开，所以还是蛮纠结的。所以打算从可以提炼的日常以及唯一一个值得说道的项目：数据仓库机房迁移作为2018年完成的总结。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/knowledge/001ouy5Qzy7qoMdlRc1e5.jpeg&quot; alt=&quot;001ouy5Qzy7qoMdlRc1e5&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="3x 职场篇" scheme="http://deletee.top/categories/3x-%E8%81%8C%E5%9C%BA%E7%AF%87/"/>
    
      <category term="3x0 总结与规划" scheme="http://deletee.top/categories/3x-%E8%81%8C%E5%9C%BA%E7%AF%87/3x0-%E6%80%BB%E7%BB%93%E4%B8%8E%E8%A7%84%E5%88%92/"/>
    
      <category term="3x00 2018年总结" scheme="http://deletee.top/categories/3x-%E8%81%8C%E5%9C%BA%E7%AF%87/3x0-%E6%80%BB%E7%BB%93%E4%B8%8E%E8%A7%84%E5%88%92/3x00-2018%E5%B9%B4%E6%80%BB%E7%BB%93/"/>
    
    
      <category term="工作总结" scheme="http://deletee.top/tags/%E5%B7%A5%E4%BD%9C%E6%80%BB%E7%BB%93/"/>
    
  </entry>
  
  <entry>
    <title>一起来学Scala(4)-循环</title>
    <link href="http://deletee.top/2019/01/22/scala-programing-loop/"/>
    <id>http://deletee.top/2019/01/22/scala-programing-loop/</id>
    <published>2019-01-22T14:02:17.000Z</published>
    <updated>2019-01-26T13:44:42.628Z</updated>
    
    <content type="html"><![CDATA[<p>&ensp;&ensp;&ensp;&ensp;&ensp;今天学习的内容是循环，循环语句允许我们多次执行一个语句或语句组，下面是大多数编程语言中循环语句的流程图：<br><img src="http://www.runoob.com/wp-content/uploads/2015/12/loop.png" alt="loop.png"><br><a id="more"></a><br>&ensp;&ensp;&ensp;&ensp;&ensp;Scala中的循环与Java中循环表现不一样，主要体现在写法及卫语句支持。下面看一段伪代码：</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(line &lt;- source.getLines)&#123;</span><br><span class="line">    <span class="keyword">for</span> (char &lt;- line)&#123;</span><br><span class="line">        <span class="keyword">if</span> char.isLetter&#123;</span><br><span class="line">            <span class="comment">// your code</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Scala可以这样简写…</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>&#123;line &lt;- source.getLines)&#123;</span><br><span class="line">    char &lt;- line</span><br><span class="line">    <span class="keyword">if</span> char.isLetter</span><br><span class="line">        <span class="comment">// your code</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Scala可使得循环的写法非常简洁。</p><h4 id="0x1-循环类型"><a href="#0x1-循环类型" class="headerlink" title="0x1 循环类型"></a>0x1 循环类型</h4><h5 id="0x10-for循环"><a href="#0x10-for循环" class="headerlink" title="0x10 for循环"></a>0x10 for循环</h5><p><strong>表达式:</strong></p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(x &lt;- <span class="type">Range</span> )&#123;</span><br><span class="line">   statement(x);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>举个例子「🌰」例1：</strong></p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">scala&gt; <span class="keyword">var</span> r = <span class="type">Range</span>(<span class="number">1</span>,<span class="number">4</span>,<span class="number">1</span>)</span><br><span class="line">r: scala.collection.immutable.<span class="type">Range</span> = <span class="type">Range</span>(<span class="number">1</span>, <span class="number">2</span> ,<span class="number">3</span>)</span><br><span class="line"></span><br><span class="line">scala&gt; <span class="keyword">for</span>( x&lt;- r)&#123;</span><br><span class="line">     | println(x)</span><br><span class="line">     | &#125;</span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="number">3</span></span><br><span class="line"></span><br><span class="line">scala&gt;</span><br></pre></td></tr></table></figure><p><strong>遍历一个Map，例2</strong></p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> names = <span class="type">Map</span>(<span class="string">"fname"</span> -&gt; <span class="string">"Robert"</span>,<span class="string">"lname"</span>-&gt;<span class="string">"Goren"</span>)</span><br><span class="line"><span class="keyword">for</span>((k,v)&lt;-names)&#123;</span><br><span class="line">    println(<span class="string">s"key:<span class="subst">$k</span>,value:<span class="subst">$v</span>"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>多种循环：</strong></p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(x &lt;- <span class="type">Range</span>; y&lt;- <span class="type">Range</span> )&#123;</span><br><span class="line">   statement(x,y);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="0x11-while循环"><a href="#0x11-while循环" class="headerlink" title="0x11 while循环"></a>0x11 while循环</h5><p>表达式如下:</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span>(condition)&#123;</span><br><span class="line">   statement(x);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>例子：</strong></p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">scala&gt; <span class="keyword">var</span> i = <span class="number">0</span></span><br><span class="line">i: <span class="type">Int</span> = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">scala&gt; <span class="keyword">while</span>(i&lt;<span class="number">10</span>)&#123;</span><br><span class="line">     |     println(i)</span><br><span class="line">     |     i += <span class="number">1</span></span><br><span class="line">     | &#125;</span><br><span class="line"><span class="number">0</span></span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="number">3</span></span><br><span class="line">scala&gt;</span><br></pre></td></tr></table></figure><p><strong>多重循环条件:</strong></p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span>(condition1)&#123;</span><br><span class="line">   <span class="keyword">while</span>(condition2)</span><br><span class="line">      statement(x);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="0x12-do…while循环"><a href="#0x12-do…while循环" class="headerlink" title="0x12 do…while循环"></a>0x12 do…while循环</h5><p>while 与 do…while循环类似</p><p>表达式如下：</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">do&#123;</span><br><span class="line">   statement(x);</span><br><span class="line">&#125;<span class="keyword">while</span>(condition)</span><br></pre></td></tr></table></figure><h4 id="0x2-循环中的卫语句"><a href="#0x2-循环中的卫语句" class="headerlink" title="0x2 循环中的卫语句"></a>0x2 循环中的卫语句</h4><p>&ensp;&ensp;&ensp;&ensp;&ensp;循环中的卫语句即在for循环中嵌入if语句，我们在业务开发中，在遍历过程中需要根据if 条件进行不同逻辑处理，比如过滤掉某些项。通常的做法是：</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(i &lt;- <span class="number">1</span> to <span class="number">10</span>)&#123;</span><br><span class="line">    <span class="keyword">if</span> (i % <span class="number">2</span> == <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        println(i)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在Scala中，我们可以这样写:</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(i &lt;- <span class="number">1</span> to <span class="number">10</span> <span class="keyword">if</span> i % <span class="number">2</span> == <span class="number">0</span>)&#123;</span><br><span class="line">    println(i)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>也可以这样写</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>&#123;</span><br><span class="line">    i &lt;- <span class="number">1</span> to <span class="number">10</span></span><br><span class="line">    <span class="keyword">if</span> i % <span class="number">2</span> == <span class="number">0</span></span><br><span class="line">&#125; println(i)</span><br></pre></td></tr></table></figure><p><strong>表达式语法：</strong></p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>&#123;</span><br><span class="line">    loop</span><br><span class="line">    condition1</span><br><span class="line">    condition2</span><br><span class="line">    ...</span><br><span class="line">&#125; statement();</span><br></pre></td></tr></table></figure><h4 id="0x3-yield语法"><a href="#0x3-yield语法" class="headerlink" title="0x3 yield语法"></a>0x3 yield语法</h4><p>&ensp;&ensp;&ensp;&ensp;&ensp;通过yield语法生成新的集合（PS：通常原集合是什么类型，生成的集合就是什么类型），假设有一个数组，数组值都是小写的字符串，将其进行首字母大写处理：</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> arr = <span class="type">Array</span>(<span class="string">"delete"</span>,<span class="string">"scala"</span>,<span class="string">"zt"</span>)</span><br><span class="line"><span class="keyword">val</span> arr_yield = <span class="keyword">for</span> (i&lt;-arr) <span class="keyword">yield</span> i.capitalize</span><br><span class="line"></span><br><span class="line">scala&gt; arr_yield.foreach(println)</span><br><span class="line"><span class="type">Delete</span></span><br><span class="line"><span class="type">Scala</span></span><br><span class="line"><span class="type">Zt</span></span><br><span class="line"></span><br><span class="line">scala&gt;</span><br></pre></td></tr></table></figure><h4 id="0x4-break-amp-continue"><a href="#0x4-break-amp-continue" class="headerlink" title="0x4 break &amp; continue"></a>0x4 break &amp; continue</h4><p>&ensp;&ensp;&ensp;&ensp;&ensp;与Java和其他语言不通，在Scala中break 一种方法，而不是一个关键字，在Scala中需用用到 breakable及break两个方法，由break抛出异常，breakable进行异常捕获，由此实现break &amp; continue功能，下面看一个例子：</p><p><strong>例1：break实现</strong></p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">breakable&#123;</span><br><span class="line">    <span class="keyword">for</span>(i&lt;- <span class="number">1</span> to <span class="number">10</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span> i % <span class="number">2</span> == <span class="number">0</span> <span class="keyword">break</span>  # 将跳出循环 实现<span class="keyword">break</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>例2：continue实现</strong></p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(i&lt;- <span class="number">1</span> to <span class="number">10</span>)&#123;</span><br><span class="line">    breakable&#123;</span><br><span class="line">    <span class="keyword">if</span> i % <span class="number">2</span> == <span class="number">0</span> <span class="keyword">break</span>  # 跳出当前，继续下一遍历</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在scala.util.control.breaks类中，有非常清晰的定义：</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * A block from which one can exit with a `break`. The `break` may be</span></span><br><span class="line"><span class="comment">   * executed further down in the call stack provided that it is called on the</span></span><br><span class="line"><span class="comment">   * exact same instance of `Breaks`.</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">breakable</span></span>(op: =&gt; <span class="type">Unit</span>) &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      op</span><br><span class="line">    &#125; <span class="keyword">catch</span> &#123;</span><br><span class="line">      <span class="keyword">case</span> ex: <span class="type">BreakControl</span> =&gt;</span><br><span class="line">        <span class="keyword">if</span> (ex ne breakException) <span class="keyword">throw</span> ex</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">   * Break from dynamically closest enclosing breakable block using this exact</span></span><br><span class="line"><span class="comment">   * `Breaks` instance.</span></span><br><span class="line"><span class="comment">   *</span></span><br><span class="line"><span class="comment">   * @note This might be different than the statically closest enclosing block!</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">break</span></span>(): <span class="type">Nothing</span> = &#123; <span class="keyword">throw</span> breakException &#125;</span><br></pre></td></tr></table></figure><p>由break函数抛出异常，由breakable捕获异常</p><h4 id="0xF-总结"><a href="#0xF-总结" class="headerlink" title="0xF 总结"></a>0xF 总结</h4><p>&ensp;&ensp;&ensp;&ensp;&ensp;循环结构与其他语言大同小异，Scala中更加简洁的表达方式是其一大亮点，学习Scala可能需要多适应Scala语言的表达方式才能理解，当然是用常规的方式进行表达也不会有问题。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&amp;ensp;&amp;ensp;&amp;ensp;&amp;ensp;&amp;ensp;今天学习的内容是循环，循环语句允许我们多次执行一个语句或语句组，下面是大多数编程语言中循环语句的流程图：&lt;br&gt;&lt;img src=&quot;http://www.runoob.com/wp-content/uploads/2015/12/loop.png&quot; alt=&quot;loop.png&quot;&gt;&lt;br&gt;
    
    </summary>
    
      <category term="1x 技术综合篇" scheme="http://deletee.top/categories/1x-%E6%8A%80%E6%9C%AF%E7%BB%BC%E5%90%88%E7%AF%87/"/>
    
      <category term="1x0 开发语言" scheme="http://deletee.top/categories/1x-%E6%8A%80%E6%9C%AF%E7%BB%BC%E5%90%88%E7%AF%87/1x0-%E5%BC%80%E5%8F%91%E8%AF%AD%E8%A8%80/"/>
    
      <category term="1x01 一起来学Scala" scheme="http://deletee.top/categories/1x-%E6%8A%80%E6%9C%AF%E7%BB%BC%E5%90%88%E7%AF%87/1x0-%E5%BC%80%E5%8F%91%E8%AF%AD%E8%A8%80/1x01-%E4%B8%80%E8%B5%B7%E6%9D%A5%E5%AD%A6Scala/"/>
    
    
      <category term="Scala" scheme="http://deletee.top/tags/Scala/"/>
    
  </entry>
  
  <entry>
    <title>如何使用Hive窗口函数</title>
    <link href="http://deletee.top/2019/01/20/how-to-use-window-func/"/>
    <id>http://deletee.top/2019/01/20/how-to-use-window-func/</id>
    <published>2019-01-20T13:48:30.000Z</published>
    <updated>2019-01-26T13:16:18.726Z</updated>
    
    <content type="html"><![CDATA[<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;窗口函数常常用于我们业务中的复杂计算，本文介绍Hive中几个常用的窗口函数，并用案例讲述如何使用。那么我们常用的窗口函数有哪些？</p><div class="table-container"><table><thead><tr><th>函数名</th><th>备注</th></tr></thead><tbody><tr><td>row_number</td><td>分组内根据排列条件从1开始的排序，没有相同的序号</td></tr><tr><td>rank</td><td>分组内根据排列条件从1开始的排序，排名相等会在名次中留下空位，例如：1，2，2，4</td></tr><tr><td>dense_rank</td><td>分组内根据排列条件从1开始的排序，排名相等会在名次中不会留下空位，例如：1，2，2，3</td></tr><tr><td>lag</td><td>分组内根据排列条件取前第n个值</td></tr><tr><td>lead</td><td>分组内根据排列条件取后第n个值，与 lag相反</td></tr><tr><td>first_value</td><td>分组内根据排列条件去分组第一个值</td></tr><tr><td>last_value</td><td>分组内根据排列条件去分组最后一个值</td></tr><tr><td>min</td><td>分组内取最小值</td></tr><tr><td>max</td><td>分组内取最大值</td></tr><tr><td>sum</td><td>分组内取分组值的和</td></tr><tr><td>…</td><td>…</td></tr></tbody></table></div><a id="more"></a><p>PS: 所有的窗口函数都将是生成的一个新列，并不会对原有数据列造成影响</p><p>下面将一一这些函数的使用。</p><h4 id="0x0-row-number"><a href="#0x0-row-number" class="headerlink" title="0x0 row_number"></a>0x0 row_number</h4><p>row_number 可以说是最常用的一个窗口函数。</p><p>举个栗子「🌰」：我们有一组数据，是一个班级一学期4次数学月考的成绩表 <code>score</code></p><div class="table-container"><table><thead><tr><th>学生ID(sid)</th><th>第几次月考（exam_time）</th><th>成绩(score)</th></tr></thead><tbody><tr><td>s001</td><td>1</td><td>83</td></tr><tr><td>s001</td><td>2</td><td>87</td></tr><tr><td>s001</td><td>3</td><td>84</td></tr><tr><td>s001</td><td>4</td><td>89</td></tr><tr><td>s002</td><td>1</td><td>90</td></tr><tr><td>s002</td><td>2</td><td>75</td></tr><tr><td>s002</td><td>3</td><td>89</td></tr><tr><td>s002</td><td>4</td><td>82</td></tr></tbody></table></div><p><strong>那么Question：请问每个学生4次月考成绩中最好的一次是哪一次月考？</strong></p><p>此时，max的手法是不能够使用了，如果解决上述问题？实际上是将根据每个学生进行分组，即每个学生的4次月考为一组，那么计算这个分组成绩中的最大值即可</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span></span><br><span class="line">      <span class="keyword">sid</span></span><br><span class="line">     ,exam_time</span><br><span class="line">     ,score</span><br><span class="line"><span class="keyword">from</span> </span><br><span class="line">(</span><br><span class="line">    <span class="keyword">select</span> <span class="keyword">sid</span></span><br><span class="line">          ,exam_time</span><br><span class="line">          ,score</span><br><span class="line">          ,row_number() <span class="keyword">over</span>(<span class="keyword">partition</span> <span class="keyword">by</span> <span class="keyword">sid</span> <span class="keyword">order</span> <span class="keyword">by</span> score <span class="keyword">desc</span>) <span class="keyword">as</span> r_idx</span><br><span class="line">    <span class="keyword">from</span> score</span><br><span class="line">)t </span><br><span class="line"><span class="keyword">where</span> t.r_idx = <span class="number">1</span></span><br></pre></td></tr></table></figure><p><strong>说明：</strong></p><p>我们称 row_number 为窗口函数，over为从句，窗口函数与over配合使用</p><p>1、使用PARTITION BY语句，使用一个或者多个原始数据类型的列进行分组<br>2、使用ORDER BY语句，使用一个或者多个数据类型的排序列 </p><p>反过来over 中若不指定 partition by 的数据列，那么整个表作为一个默认分组，同理不指定 order by 那么默认当前顺序，<strong>大家先只需了解这两点，熟练之后可以学习第三点</strong>。</p><p>3、使用窗口规范，窗口规范支持以下格式：</p><p>(ROWS | RANGE) BETWEEN (UNBOUNDED | [num]) PRECEDING AND ([num] PRECEDING | CURRENT ROW | (UNBOUNDED | [num]) FOLLOWING)<br>(ROWS | RANGE) BETWEEN CURRENT ROW AND (CURRENT ROW | (UNBOUNDED | [num]) FOLLOWING)<br>(ROWS | RANGE) BETWEEN [num] FOLLOWING AND (UNBOUNDED | [num]) FOLLOWING</p><p>详细参考文档：<a href="https://cwiki.apache.org/confluence/display/ASTERIXDB/Window+Functions" target="_blank" rel="noopener">Hive官方参考文档</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;窗口函数常常用于我们业务中的复杂计算，本文介绍Hive中几个常用的窗口函数，并用案例讲述如何使用。那么我们常用的窗口函数有哪些？&lt;/p&gt;
&lt;div class=&quot;table-container&quot;&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;函数名&lt;/th&gt;
&lt;th&gt;备注&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;row_number&lt;/td&gt;
&lt;td&gt;分组内根据排列条件从1开始的排序，没有相同的序号&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;rank&lt;/td&gt;
&lt;td&gt;分组内根据排列条件从1开始的排序，排名相等会在名次中留下空位，例如：1，2，2，4&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;dense_rank&lt;/td&gt;
&lt;td&gt;分组内根据排列条件从1开始的排序，排名相等会在名次中不会留下空位，例如：1，2，2，3&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;lag&lt;/td&gt;
&lt;td&gt;分组内根据排列条件取前第n个值&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;lead&lt;/td&gt;
&lt;td&gt;分组内根据排列条件取后第n个值，与 lag相反&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;first_value&lt;/td&gt;
&lt;td&gt;分组内根据排列条件去分组第一个值&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;last_value&lt;/td&gt;
&lt;td&gt;分组内根据排列条件去分组最后一个值&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;min&lt;/td&gt;
&lt;td&gt;分组内取最小值&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;max&lt;/td&gt;
&lt;td&gt;分组内取最大值&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;sum&lt;/td&gt;
&lt;td&gt;分组内取分组值的和&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;…&lt;/td&gt;
&lt;td&gt;…&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
    
    </summary>
    
      <category term="1x 技术综合篇" scheme="http://deletee.top/categories/1x-%E6%8A%80%E6%9C%AF%E7%BB%BC%E5%90%88%E7%AF%87/"/>
    
      <category term="1x2 技术平台" scheme="http://deletee.top/categories/1x-%E6%8A%80%E6%9C%AF%E7%BB%BC%E5%90%88%E7%AF%87/1x2-%E6%8A%80%E6%9C%AF%E5%B9%B3%E5%8F%B0/"/>
    
      <category term="1x21 Hive" scheme="http://deletee.top/categories/1x-%E6%8A%80%E6%9C%AF%E7%BB%BC%E5%90%88%E7%AF%87/1x2-%E6%8A%80%E6%9C%AF%E5%B9%B3%E5%8F%B0/1x21-Hive/"/>
    
    
      <category term="Hive" scheme="http://deletee.top/tags/Hive/"/>
    
      <category term="SQL" scheme="http://deletee.top/tags/SQL/"/>
    
  </entry>
  
  <entry>
    <title>ftp上传目录的方法</title>
    <link href="http://deletee.top/2019/01/16/ftp-upload-folder/"/>
    <id>http://deletee.top/2019/01/16/ftp-upload-folder/</id>
    <published>2019-01-16T12:41:30.000Z</published>
    <updated>2019-01-26T13:16:00.449Z</updated>
    
    <content type="html"><![CDATA[<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;众所周知，使用ftp命令是不能够直接上传文件夹的，然后工作中有很多需要上传目录的场景，通常大家想到的就是先创建文件夹，然后再通过遍历的方式上传文件，其中比较繁琐的是，ftp里不支持，多层级目录直接创建，<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">deletee:$ mkdir -p $&#123;dir&#125;/$&#123;subdir&#125;</span><br></pre></td></tr></table></figure></p><p>这样的方式，只能逐级创建，将造成很多工作量。下面将分享下如何快速有效的实现上传ftp文件夹</p><a id="more"></a><h4 id="0x0-生成创建多级文件夹命令"><a href="#0x0-生成创建多级文件夹命令" class="headerlink" title="0x0 生成创建多级文件夹命令"></a>0x0 生成创建多级文件夹命令</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">export mkdir_cmds=`find $&#123;upload_folder&#125; -type d -printf '%P\n' \</span><br><span class="line">          |awk '&#123; \</span><br><span class="line">               split($0,a,"/");            \</span><br><span class="line">               for (i in a) &#123;              \</span><br><span class="line">                  cmds ="mkdir ";          \</span><br><span class="line">                  for (j=1;j&lt;=i;j++) &#123;     \</span><br><span class="line">                      cmds = cmds"/"a[j]   \</span><br><span class="line">                  &#125; print cmds             \</span><br><span class="line">              &#125;                            \</span><br><span class="line">          &#125;'                               \</span><br><span class="line">          |sort|uniq`</span><br></pre></td></tr></table></figure><p><strong>效果如下：</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">deletee@pig_house:~/logon_log/bin$ ls -lh</span><br><span class="line">total 48K</span><br><span class="line">-rwxr-xr-x 1 delete pig_house  324 Jan  9 14:59 clearftpfile.sh</span><br><span class="line">-rwxr-xr-x 1 delete pig_house 2.2K Jan 11 12:19 contact_send.sh</span><br><span class="line">-rwxr-xr-x 1 delete pig_house 5.7K Jan  9 14:59 handle_file_repair.sh</span><br><span class="line">-rwxr-xr-x 1 delete pig_house 7.9K Jan 10 10:29 handle_file.sh</span><br><span class="line">drwxr-xr-x 3 delete pig_house 4.0K Jan 14 15:59 logon</span><br><span class="line">-rwxr-xr-x 1 delete pig_house 2.2K Jan 11 12:18 mail_send.sh</span><br><span class="line">-rwxr-xr-x 1 delete pig_house 2.2K Jan 11 12:18 news_send.sh</span><br><span class="line">drwxr-xr-x 3 delete pig_house 4.0K Jan 11 12:19 reg</span><br><span class="line">-rwxr-xr-x 1 delete pig_house 1.4K Jan  9 14:59 repair_login.sh</span><br><span class="line">-rwxr-xr-x 1 delete pig_house 2.8K Jan 16 14:50 send_news.sh</span><br><span class="line"></span><br><span class="line">deletee@pig_house:~/logon_log/bin$ upload_folder="bin"</span><br><span class="line">deletee@pig_house:~/logon_log/bin$ find $&#123;upload_folder&#125; -type d -printf '%P\n' \</span><br><span class="line"><span class="meta">&gt;</span><span class="bash">           |awk <span class="string">'&#123; \</span></span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash">                split(<span class="variable">$0</span>,a,<span class="string">"/"</span>);            \</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash">                <span class="keyword">for</span> (i <span class="keyword">in</span> a) &#123;              \</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash">                   cmds =<span class="string">"mkdir /<span class="variable">$&#123;upload_folder&#125;</span>"</span>;          \</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash">                   <span class="keyword">for</span> (j=1;j&lt;=i;j++) &#123;     \</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash">                       cmds = cmds<span class="string">"/"</span>a[j]   \</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash">                   &#125; <span class="built_in">print</span> cmds             \</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash">               &#125;                            \</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash">           &#125;<span class="string">'                               \</span></span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash">           |sort|uniq</span></span><br><span class="line">mkdir /bin/logon</span><br><span class="line">mkdir /bin/logon/bak</span><br><span class="line">mkdir /bin/reg</span><br><span class="line">mkdir /bin/reg/bak</span><br></pre></td></tr></table></figure><h4 id="0x1-生成put文件命令"><a href="#0x1-生成put文件命令" class="headerlink" title="0x1 生成put文件命令"></a>0x1 生成put文件命令</h4><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;原理与创建文件夹命令类似<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">export put_cmds=`find $&#123;upload_folder&#125; -type f -printf 'put %p $&#123;ftp_target_folder&#125;/%P\n'`</span><br></pre></td></tr></table></figure></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">deletee@pig_house:upload_path='~/logon_log/bin'</span><br><span class="line">deletee@pig_house:upload_folder='bin'</span><br><span class="line">deletee@pig_house:ftp_target_path='/ftp'</span><br><span class="line"></span><br><span class="line">deletee@pig_house:find $&#123;upload_path&#125; -type f -printf 'put %p $&#123;ftp_target_path&#125;/%P\n'</span><br><span class="line">put ./bin/logon/bak/police-logon.jar.bak /ftp/bin/logon/bak/police-logon.jar.bak</span><br><span class="line">put ./bin/logon/bak/run.sh /ftp/bin/logon/bak/run.sh</span><br><span class="line">put ./bin/logon/bak/stop.sh /ftp/bin/logon/bak/stop.sh</span><br><span class="line">...</span><br></pre></td></tr></table></figure><h4 id="0x2-一个栗子"><a href="#0x2-一个栗子" class="headerlink" title="0x2 一个栗子"></a>0x2 一个栗子</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">!/bin/bash</span></span><br><span class="line">upload_path=$1        # 待上传目录</span><br><span class="line">ftp_target_path=$2    # ftp目标目录</span><br><span class="line"></span><br><span class="line">upload_folder=`basename $&#123;upload_path&#125;`</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">export mkdir_cmds=`find $&#123;upload_path&#125; -type d -printf '%P\n' \</span><br><span class="line">          |awk '&#123; \</span><br><span class="line">               split($0,a,"/");            \</span><br><span class="line">               for (i in a) &#123;              \</span><br><span class="line">                  cmds ="mkdir $&#123;upload_folder&#125;";          \</span><br><span class="line">                  for (j=1;j&lt;=i;j++) &#123;     \</span><br><span class="line">                      cmds = cmds"/"a[j]   \</span><br><span class="line">                  &#125; print cmds             \</span><br><span class="line">              &#125;                            \</span><br><span class="line">          &#125;'                               \</span><br><span class="line">          |sort|uniq`</span><br><span class="line"></span><br><span class="line">export put_cmds=`find $&#123;upload_path&#125; -type f -printf 'put %p $&#123;ftp_target_folder&#125;/%P\n'`</span><br><span class="line"></span><br><span class="line">ftp_host=</span><br><span class="line">ftp_port=</span><br><span class="line">ftp_username=</span><br><span class="line">ftp_password=</span><br><span class="line">ftp -i -n &lt;&lt; EOF</span><br><span class="line">open $ftp_host $ftp_port</span><br><span class="line">user $ftp_username $ftp_password</span><br><span class="line">bi</span><br><span class="line"><span class="meta">$</span><span class="bash">&#123;mkdir_cmds&#125;</span></span><br><span class="line"><span class="meta">$</span><span class="bash">&#123;put_cmds&#125;</span></span><br><span class="line">bye</span><br><span class="line">EOF</span><br></pre></td></tr></table></figure><h4 id="0XF-总结"><a href="#0XF-总结" class="headerlink" title="0XF 总结"></a>0XF 总结</h4><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;利用生成ftp命令的方式，避免多层级及不定层级目录的创建ftp目录的繁琐。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;大家觉得怎么样？或是有更好的方法！</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;众所周知，使用ftp命令是不能够直接上传文件夹的，然后工作中有很多需要上传目录的场景，通常大家想到的就是先创建文件夹，然后再通过遍历的方式上传文件，其中比较繁琐的是，ftp里不支持，多层级目录直接创建，&lt;br&gt;&lt;figure class=&quot;highlight shell&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;deletee:$ mkdir -p $&amp;#123;dir&amp;#125;/$&amp;#123;subdir&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;这样的方式，只能逐级创建，将造成很多工作量。下面将分享下如何快速有效的实现上传ftp文件夹&lt;/p&gt;
    
    </summary>
    
      <category term="1x 技术综合篇" scheme="http://deletee.top/categories/1x-%E6%8A%80%E6%9C%AF%E7%BB%BC%E5%90%88%E7%AF%87/"/>
    
      <category term="1x0 开发语言" scheme="http://deletee.top/categories/1x-%E6%8A%80%E6%9C%AF%E7%BB%BC%E5%90%88%E7%AF%87/1x0-%E5%BC%80%E5%8F%91%E8%AF%AD%E8%A8%80/"/>
    
      <category term="1x00 一起来学Shell" scheme="http://deletee.top/categories/1x-%E6%8A%80%E6%9C%AF%E7%BB%BC%E5%90%88%E7%AF%87/1x0-%E5%BC%80%E5%8F%91%E8%AF%AD%E8%A8%80/1x00-%E4%B8%80%E8%B5%B7%E6%9D%A5%E5%AD%A6Shell/"/>
    
    
      <category term="shell" scheme="http://deletee.top/tags/shell/"/>
    
      <category term="awk" scheme="http://deletee.top/tags/awk/"/>
    
      <category term="ftp" scheme="http://deletee.top/tags/ftp/"/>
    
  </entry>
  
  <entry>
    <title>一起来学Scala(3)-字符串</title>
    <link href="http://deletee.top/2019/01/10/scala-programing-string/"/>
    <id>http://deletee.top/2019/01/10/scala-programing-string/</id>
    <published>2019-01-10T15:30:50.000Z</published>
    <updated>2019-01-26T13:16:51.254Z</updated>
    
    <content type="html"><![CDATA[<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;上文中已经介绍了Scala语言中的基本类型，本文着重介绍下字符串的用法，字符串在我们日常开发中经常用到，字符串在Scala中的类型<code>String</code>，那么Scala中的String和Java中的String有什么关系呢？</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">scala&gt; <span class="string">"Scala"</span>.getClass.getName</span><br><span class="line">res0: <span class="type">String</span> = java.lang.<span class="type">String</span></span><br><span class="line"></span><br><span class="line">scala&gt;</span><br></pre></td></tr></table></figure><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;本以为Scala是怎样实现了String，上述代码中告诉我们Scala中的<code>String</code>竟就是Java中的<code>String</code>。我们接下更深层次的学习<code>String</code>。<br><img src="/images/a311e33c02d299ee621f10649459ac73.png" alt="a311e33c02d299ee621f10649459ac73"><br><a id="more"></a></p><h4 id="0x0-基本用法"><a href="#0x0-基本用法" class="headerlink" title="0x0 基本用法"></a>0x0 基本用法</h4><h5 id="0x00-长度-length"><a href="#0x00-长度-length" class="headerlink" title="0x00 长度 .length"></a>0x00 长度 .length</h5><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">scala&gt; <span class="keyword">val</span> str = <span class="string">"Scala"</span></span><br><span class="line">str: <span class="type">String</span> = <span class="type">Scala</span></span><br><span class="line"></span><br><span class="line">scala&gt; str.length</span><br><span class="line">res3: <span class="type">Int</span> = <span class="number">5</span></span><br><span class="line"></span><br><span class="line">scala&gt;</span><br></pre></td></tr></table></figure><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;通过 .length的方式可获取变量str的长度</p><h5 id="0x01-遍历"><a href="#0x01-遍历" class="headerlink" title="0x01 遍历"></a>0x01 遍历</h5><p><strong>第一种方式:</strong> 通过遍历字符串的每一个字符</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">scala&gt; <span class="keyword">for</span>(c &lt;- str) &#123; println(c) &#125;</span><br><span class="line"><span class="type">S</span></span><br><span class="line">c</span><br><span class="line">a</span><br><span class="line">l</span><br><span class="line">a</span><br><span class="line"></span><br><span class="line">scala&gt;</span><br></pre></td></tr></table></figure><p><strong>第二种方式:</strong> 通过调用.foreach方法，入参 println函数实现</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">scala&gt; str.foreach(println)</span><br><span class="line"><span class="type">S</span></span><br><span class="line">c</span><br><span class="line">a</span><br><span class="line">l</span><br><span class="line">a</span><br><span class="line"></span><br><span class="line">scala&gt;</span><br></pre></td></tr></table></figure><p><strong>第三种方式:</strong> 通过调用.map方法，入参 println函数实现</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">scala&gt; str.map(println)</span><br><span class="line"><span class="type">S</span></span><br><span class="line">c</span><br><span class="line">a</span><br><span class="line">l</span><br><span class="line">a</span><br><span class="line"></span><br><span class="line">scala&gt;</span><br></pre></td></tr></table></figure><h5 id="0x02-过滤-filter"><a href="#0x02-过滤-filter" class="headerlink" title="0x02 过滤 .filter"></a>0x02 过滤 .filter</h5><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">scala&gt; str.filter(_ != 'a')</span><br><span class="line">res10: <span class="type">String</span> = <span class="type">Scl</span></span><br><span class="line"></span><br><span class="line">scala&gt;</span><br></pre></td></tr></table></figure><h5 id="0x03-Bytes数组-getBytes"><a href="#0x03-Bytes数组-getBytes" class="headerlink" title="0x03 Bytes数组 .getBytes"></a>0x03 Bytes数组 .getBytes</h5><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">scala&gt; str.getBytes</span><br><span class="line">res11: <span class="type">Array</span>[<span class="type">Byte</span>] = <span class="type">Array</span>(<span class="number">83</span>, <span class="number">99</span>, <span class="number">97</span>, <span class="number">108</span>, <span class="number">97</span>)</span><br><span class="line"></span><br><span class="line">scala&gt;</span><br></pre></td></tr></table></figure><p>0x0F 小结</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<code>String</code>有很多的方法，例如 <code>.drop(n)</code> 删除前面n个字符,<code>.take(n)</code>取前n个字符，<code>.captitalize</code> 将字符串转为大写(与 .toUpperCase 功能等同)等等。</p><h4 id="0x1-字符串相等性"><a href="#0x1-字符串相等性" class="headerlink" title="0x1 字符串相等性"></a>0x1 字符串相等性</h4><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;如何比较两个字符串是否相等</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">scala&gt; <span class="keyword">val</span> str1 = <span class="string">"Scala"</span></span><br><span class="line">str1: <span class="type">String</span> = <span class="type">Scala</span></span><br><span class="line"></span><br><span class="line">scala&gt; <span class="keyword">val</span> str2 = <span class="string">"S"</span> + <span class="string">"cala"</span></span><br><span class="line">str2: <span class="type">String</span> = <span class="type">Scala</span></span><br><span class="line"></span><br><span class="line">scala&gt; str1 == str2</span><br><span class="line">res12: <span class="type">Boolean</span> = <span class="literal">true</span></span><br><span class="line"></span><br><span class="line">scala&gt;</span><br></pre></td></tr></table></figure><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;如上，两个字符串内容是相等的,通过<code>==</code> 可判断两个字符串内容是否相等，这与Java中使用equal的方法比较两个对象不同。在Java中需要先判断调用的对象是否为null，即在AnyRef类使用时，Scala也会判断调用是否是null，其他情况下是不需要判断变量是否为null。实际上在Scala开发过程中，不推荐定义null，</p><h4 id="0x2-创建多行字符串"><a href="#0x2-创建多行字符串" class="headerlink" title="0x2 创建多行字符串"></a>0x2 创建多行字符串</h4><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;这一点与Python类似，可以通过三个双引号来定义，例如：</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">scala&gt; <span class="keyword">val</span> multi_line_str = <span class="string">""</span><span class="string">"Hello,</span></span><br><span class="line"><span class="string">     |                         I love Scala"</span><span class="string">""</span></span><br><span class="line">multi_line_str: <span class="type">String</span> =</span><br><span class="line"><span class="type">Hello</span>,</span><br><span class="line">                        <span class="type">I</span> love <span class="type">Scala</span></span><br><span class="line"></span><br><span class="line">scala&gt;</span><br></pre></td></tr></table></figure><p>显示第二行是一连串的空格，我们可以使用管道的方式，与Python类似</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">scala&gt; <span class="keyword">val</span> multi_line_str = <span class="string">""</span><span class="string">"Hello,</span></span><br><span class="line"><span class="string">     | I love Scala</span></span><br><span class="line"><span class="string">     | "</span><span class="string">""</span></span><br><span class="line">multi_line_str: <span class="type">String</span> =</span><br><span class="line"><span class="string">"Hello,</span></span><br><span class="line"><span class="string">I love Scala</span></span><br><span class="line"><span class="string">"</span></span><br><span class="line"></span><br><span class="line">scala&gt;</span><br></pre></td></tr></table></figure><p>或者</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">scala&gt; <span class="keyword">val</span> multi_line_str = <span class="string">""</span><span class="string">"Hello,</span></span><br><span class="line"><span class="string">     | I love Scala</span></span><br><span class="line"><span class="string">     | "</span><span class="string">""</span>.stripMargin</span><br><span class="line">multi_line_str: <span class="type">String</span> =</span><br><span class="line"><span class="string">"Hello,</span></span><br><span class="line"><span class="string">I love Scala</span></span><br><span class="line"><span class="string">"</span></span><br><span class="line"></span><br><span class="line">scala&gt;</span><br></pre></td></tr></table></figure><p>如果不喜欢使用管道 <code>|</code>可以使用其他符号表示，例如:</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">scala&gt; <span class="keyword">val</span> multi_line_str = <span class="string">""</span><span class="string">"Hello,</span></span><br><span class="line"><span class="string">     @ I love Scala</span></span><br><span class="line"><span class="string">     @ "</span><span class="string">""</span>.stripMargin('@')</span><br><span class="line">multi_line_str: <span class="type">String</span> =</span><br><span class="line"><span class="string">"Hello,</span></span><br><span class="line"><span class="string">I love Scala</span></span><br><span class="line"><span class="string">"</span></span><br><span class="line"></span><br><span class="line">scala&gt;</span><br></pre></td></tr></table></figure><h4 id="0x3-变量代换"><a href="#0x3-变量代换" class="headerlink" title="0x3 变量代换"></a>0x3 变量代换</h4><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 类似于Python一样，使用变量的值代换进另一个字符串</p><h5 id="0x30-s是一个方法"><a href="#0x30-s是一个方法" class="headerlink" title="0x30 s是一个方法"></a>0x30 s是一个方法</h5><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">scala&gt; <span class="keyword">val</span> name = <span class="string">"deleee"</span></span><br><span class="line">name: <span class="type">String</span> = deleee</span><br><span class="line"></span><br><span class="line">scala&gt; <span class="keyword">val</span> setence = <span class="string">s"My name is <span class="subst">$name</span>"</span></span><br><span class="line">setence: <span class="type">String</span> = <span class="type">My</span> name is deleee</span><br><span class="line"></span><br><span class="line">scala&gt;</span><br></pre></td></tr></table></figure><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;整形变量可以做计算，例如：</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">scala&gt; <span class="keyword">var</span> age = <span class="number">2</span></span><br><span class="line">age: <span class="type">Int</span> = <span class="number">2</span></span><br><span class="line"></span><br><span class="line">scala&gt; <span class="keyword">val</span> setence1 = <span class="string">s"My age is <span class="subst">$&#123;age + 1&#125;</span>"</span></span><br><span class="line">setence1: <span class="type">String</span> = <span class="type">My</span> age is <span class="number">3</span></span><br><span class="line"></span><br><span class="line">scala&gt;</span><br></pre></td></tr></table></figure><h5 id="0x31-字符串差值-printf"><a href="#0x31-字符串差值-printf" class="headerlink" title="0x31 字符串差值(printf)"></a>0x31 字符串差值(printf)</h5><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 即我们常在C语言或者Python中的数值格式化，需要在字符串前使用<code>f</code>标识</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">scala&gt; <span class="keyword">val</span> setence2 = <span class="string">f"My age is <span class="subst">$&#123;age + 1&#125;</span>%.2f"</span></span><br><span class="line">setence2: <span class="type">String</span> = <span class="type">My</span> age is <span class="number">3.00</span></span><br><span class="line"></span><br><span class="line">scala&gt;</span><br></pre></td></tr></table></figure><p><code>%.2f</code>表示将数值进行小数点后2位精度</p><div class="table-container"><table><thead><tr><th>格式化符号</th><th>描述</th></tr></thead><tbody><tr><td>%c</td><td>字符</td></tr><tr><td>%d</td><td>整数 与 %i 相同</td></tr><tr><td>%e</td><td>指数浮点型</td></tr><tr><td>%f</td><td>浮点型</td></tr><tr><td>%i</td><td>整数</td></tr><tr><td>%o</td><td>八进制</td></tr><tr><td>%s</td><td>字符串</td></tr><tr><td>%u</td><td>无符号整形</td></tr><tr><td>%x</td><td>十六进制</td></tr><tr><td>%% 或者 \%</td><td>输出一个百分号</td></tr></tbody></table></div><h4 id="0x4-正则表达式"><a href="#0x4-正则表达式" class="headerlink" title="0x4 正则表达式"></a>0x4 正则表达式</h4><h5 id="0x40-创建正则表达式"><a href="#0x40-创建正则表达式" class="headerlink" title="0x40 创建正则表达式"></a>0x40 创建正则表达式</h5><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;在字符串末尾使用<code>.r</code>即表示创建的为一个Regex对象，随后可以用<code>.findFirstIn</code>匹配第一个，<code>.findAllIn</code>来匹配所有的。</p><p><strong>例如:</strong></p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">scala&gt; <span class="keyword">var</span> numPatten = <span class="string">"[0-9]+"</span>.r</span><br><span class="line">numPatten: scala.util.matching.<span class="type">Regex</span> = [<span class="number">0</span><span class="number">-9</span>]+</span><br><span class="line"></span><br><span class="line">scala&gt; <span class="keyword">val</span> str = <span class="string">"123 is not 321"</span></span><br><span class="line">str: <span class="type">String</span> = <span class="number">123</span> is not <span class="number">321</span></span><br><span class="line"></span><br><span class="line">scala&gt; <span class="keyword">val</span> match1 = numPatten.findFirstIn(str)</span><br><span class="line">match1: <span class="type">Option</span>[<span class="type">String</span>] = <span class="type">Some</span>(<span class="number">123</span>)</span><br><span class="line"></span><br><span class="line">scala&gt; numPatten.findAllIn(str).foreach(println)</span><br><span class="line"><span class="number">123</span></span><br><span class="line"><span class="number">321</span></span><br><span class="line"></span><br><span class="line">scala&gt;</span><br></pre></td></tr></table></figure><p><strong>或者：</strong></p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">scala&gt; <span class="keyword">import</span> scala.util.matching.<span class="type">Regex</span></span><br><span class="line"><span class="keyword">import</span> scala.util.matching.<span class="type">Regex</span></span><br><span class="line"></span><br><span class="line">scala&gt; <span class="keyword">val</span> pattern = <span class="keyword">new</span> <span class="type">Regex</span>(<span class="string">"(S|s)cala"</span>)</span><br><span class="line">pattern: scala.util.matching.<span class="type">Regex</span> = (<span class="type">S</span>|s)cala</span><br><span class="line"></span><br><span class="line">scala&gt;</span><br></pre></td></tr></table></figure><p><strong>PS:关注下返回类型</strong></p><p>（1）<code>.findFirstIn</code> 返回的一个是Some类型的变量，我们可以简单的认为Some是一个容器，匹配成功则返回数字，匹配不成功就返回None</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">scala&gt; <span class="keyword">var</span> numPatten = <span class="string">"[0-9]+"</span>.r</span><br><span class="line">numPatten: scala.util.matching.<span class="type">Regex</span> = [<span class="number">0</span><span class="number">-9</span>]+</span><br><span class="line"></span><br><span class="line">scala&gt; <span class="keyword">val</span> str = <span class="string">"not number"</span></span><br><span class="line">str: <span class="type">String</span> = not number</span><br><span class="line"></span><br><span class="line">scala&gt; <span class="keyword">val</span> match1 = numPatten.findFirstIn(str)</span><br><span class="line">match1: <span class="type">Option</span>[<span class="type">String</span>] = <span class="type">None</span></span><br><span class="line"></span><br><span class="line">scala&gt;</span><br></pre></td></tr></table></figure><p>（2）<code>.findAllIn</code>返回的是一个迭代器，可使用foreach方法进行遍历，也可以将迭代器转为数组,例如:</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">scala&gt; <span class="keyword">var</span> matchArr = numPatten.findAllIn(str).toArray</span><br><span class="line">matchArr: <span class="type">Array</span>[<span class="type">String</span>] = <span class="type">Array</span>(<span class="number">123</span>, <span class="number">321</span>)</span><br><span class="line"></span><br><span class="line">scala&gt; <span class="keyword">for</span> ( a &lt;- matchArr) println(a)</span><br><span class="line"><span class="number">123</span></span><br><span class="line"><span class="number">321</span></span><br><span class="line"></span><br><span class="line">scala&gt; matchArr.foreach(println)</span><br><span class="line"><span class="number">123</span></span><br><span class="line"><span class="number">321</span></span><br><span class="line"></span><br><span class="line">scala&gt;</span><br></pre></td></tr></table></figure><h5 id="0x41-字符串替换"><a href="#0x41-字符串替换" class="headerlink" title="0x41 字符串替换"></a>0x41 字符串替换</h5><p>常规的替换手法字符串调用方法<code>.replaceAll</code></p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">scala&gt; <span class="keyword">val</span> str = <span class="string">"123 is not 321"</span></span><br><span class="line">str: <span class="type">String</span> = <span class="number">123</span> is not <span class="number">321</span></span><br><span class="line"></span><br><span class="line">scala&gt; str.replaceAll(<span class="string">"[1-9]+"</span>,<span class="string">"sss"</span>)</span><br><span class="line">res12: <span class="type">String</span> = sss is not sss</span><br><span class="line"></span><br><span class="line">scala&gt;</span><br></pre></td></tr></table></figure><p>也可以使用正则表达式作为对象调用方法 <code>.replaceAllIn</code>及<code>.replaceFirstIn</code></p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">scala&gt; <span class="keyword">var</span> numPatten = <span class="string">"[0-9]+"</span>.r</span><br><span class="line"></span><br><span class="line">scala&gt; <span class="keyword">val</span> str = <span class="string">"123 is not 321"</span></span><br><span class="line">str: <span class="type">String</span> = <span class="number">123</span> is not <span class="number">321</span></span><br><span class="line"></span><br><span class="line">scala&gt; numPatten.replaceAllIn(str,<span class="string">"sss"</span>)</span><br><span class="line">res13: <span class="type">String</span> = sss is not sss</span><br><span class="line"></span><br><span class="line">scala&gt;</span><br></pre></td></tr></table></figure><h5 id="0x42-字符串抽取"><a href="#0x42-字符串抽取" class="headerlink" title="0x42 字符串抽取"></a>0x42 字符串抽取</h5><p>正则表达式中使用() 表示 匹配的组，与其他（Perl、Python表达式相同）</p><p><strong>例如：</strong></p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">scala&gt; <span class="keyword">import</span> scala.util.matching.<span class="type">Regex</span></span><br><span class="line"><span class="keyword">import</span> scala.util.matching.<span class="type">Regex</span></span><br><span class="line"></span><br><span class="line">scala&gt; <span class="keyword">val</span> numberPattern: <span class="type">Regex</span> = <span class="string">"[0-9]"</span>.r</span><br><span class="line">numberPattern: scala.util.matching.<span class="type">Regex</span> = [<span class="number">0</span><span class="number">-9</span>]</span><br><span class="line"></span><br><span class="line">scala&gt; numberPattern.findFirstMatchIn(<span class="string">"awesomepassword"</span>) <span class="keyword">match</span> &#123;</span><br><span class="line">     |   <span class="keyword">case</span> <span class="type">Some</span>(_) =&gt; println(<span class="string">"Password OK"</span>)</span><br><span class="line">     |   <span class="keyword">case</span> <span class="type">None</span> =&gt; println(<span class="string">"Password must contain a number"</span>)</span><br><span class="line">     | &#125;</span><br><span class="line"><span class="type">Password</span> must contain a number</span><br><span class="line"></span><br><span class="line">scala&gt;</span><br></pre></td></tr></table></figure><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">scala&gt;<span class="keyword">import</span> scala.util.matching.<span class="type">Regex</span></span><br><span class="line">scala&gt;<span class="keyword">val</span> keyValPattern: <span class="type">Regex</span> = <span class="string">"([0-9a-zA-Z-#() ]+): ([0-9a-zA-Z-#() ]+)"</span>.r</span><br><span class="line">scala&gt;<span class="keyword">val</span> input: <span class="type">String</span> =</span><br><span class="line">    <span class="string">""</span><span class="string">"background-color: #A03300;</span></span><br><span class="line"><span class="string">     |background-image: url(img/header100.png);</span></span><br><span class="line"><span class="string">     |background-position: top center;</span></span><br><span class="line"><span class="string">     |background-repeat: repeat-x;</span></span><br><span class="line"><span class="string">     |background-size: 2160px 108px;</span></span><br><span class="line"><span class="string">     |margin: 0;</span></span><br><span class="line"><span class="string">     |height: 108px;</span></span><br><span class="line"><span class="string">     |width: 100%;"</span><span class="string">""</span>.stripMargin</span><br><span class="line">scala&gt;<span class="keyword">for</span> (patternMatch &lt;- keyValPattern.findAllMatchIn(input))</span><br><span class="line">     | println(<span class="string">s"key: <span class="subst">$&#123;patternMatch.group(1)&#125;</span> value: <span class="subst">$&#123;patternMatch.group(2)&#125;</span>"</span>)</span><br><span class="line"></span><br><span class="line">key: background-color value: #<span class="type">A03300</span></span><br><span class="line">key: background-image value: url(img</span><br><span class="line">key: background-position value: top center</span><br><span class="line">key: background-repeat value: repeat-x</span><br><span class="line">key: background-size value: <span class="number">2160</span>px <span class="number">108</span>px</span><br><span class="line">key: margin value: <span class="number">0</span></span><br><span class="line">key: height value: <span class="number">108</span>px</span><br><span class="line">key: width value: <span class="number">100</span></span><br><span class="line"></span><br><span class="line">scala&gt;</span><br></pre></td></tr></table></figure><p>更多更详细的内容请参考<a href="https://blog.csdn.net/smile_from_2015/article/details/80337535" target="_blank" rel="noopener">Scala之旅-正则表达式模式和提取器对象（EXTRACTOR OBJECTS）</a></p><h5 id="0x4E-正则表达式"><a href="#0x4E-正则表达式" class="headerlink" title="0x4E 正则表达式"></a>0x4E 正则表达式</h5><p>Scala 的正则表达式继承了 Java 的语法规则，Java 则大部分使用了 Perl 语言的规则。</p><p>下表我们给出了常用的一些正则表达式规则：</p><div class="table-container"><table><thead><tr><th>表达式</th><th>匹配规则</th></tr></thead><tbody><tr><td>^</td><td>匹配输入字符串开始的位置。</td></tr><tr><td>$</td><td>匹配输入字符串结尾的位置。</td></tr><tr><td>.</td><td>匹配除”\r\n”之外的任何单个字符。</td></tr><tr><td>[…]</td><td>字符集。匹配包含的任一字符。例如，”[abc]”匹配”plain”中的”a”。</td></tr><tr><td><sup><a href="#fn_..." id="reffn_...">...</a></sup></td><td>反向字符集。匹配未包含的任何字符。例如，”<sup><a href="#fn_abc" id="reffn_abc">abc</a></sup>“匹配”plain”中”p”，”l”，”i”，”n”。</td></tr><tr><td>\\A</td><td>匹配输入字符串开始的位置（无多行支持）</td></tr><tr><td>\\z</td><td>字符串结尾(类似$，但不受处理多行选项的影响)</td></tr><tr><td>\\Z</td><td>字符串结尾或行尾(不受处理多行选项的影响)</td></tr><tr><td>re*</td><td>重复零次或更多次</td></tr><tr><td>re+</td><td>重复一次或更多次</td></tr><tr><td>re?</td><td>重复零次或一次</td></tr><tr><td>re{ n}</td><td>重复n次</td></tr><tr><td>re{ n,}</td><td></td></tr><tr><td>re{ n, m}</td><td>重复n到m次</td></tr><tr><td>a\</td><td>b</td><td>匹配 a 或者 b</td></tr><tr><td>(re)</td><td>匹配 re,并捕获文本到自动命名的组里</td></tr><tr><td>(?: re)</td><td>匹配 re,不捕获匹配的文本，也不给此分组分配组号</td></tr><tr><td>(?&gt; re)</td><td>贪婪子表达式</td></tr><tr><td>\\w</td><td>匹配字母或数字或下划线或汉字</td></tr><tr><td>\\W</td><td>匹配任意不是字母，数字，下划线，汉字的字符</td></tr><tr><td>\\s</td><td>匹配任意的空白符,相等于 [\t\n\r\f]</td></tr><tr><td>\\S</td><td>匹配任意不是空白符的字符</td></tr><tr><td>\\d</td><td>匹配数字，类似 [0-9]</td></tr><tr><td>\\D</td><td>匹配任意非数字的字符</td></tr><tr><td>\\G</td><td>当前搜索的开头</td></tr><tr><td>\\n</td><td>换行符</td></tr><tr><td>\\b</td><td>通常是单词分界位置，但如果在字符类里使用代表退格</td></tr><tr><td>\\B</td><td>匹配不是单词开头或结束的位置</td></tr><tr><td>\\t</td><td>制表符</td></tr><tr><td>\\Q</td><td>开始引号：<strong>\Q(a+b)*3\E</strong> 可匹配文本 “(a+b)*3”。</td></tr><tr><td>\\E</td><td>结束引号：<strong>\Q(a+b)*3\E</strong> 可匹配文本 “(a+b)*3”。</td></tr></tbody></table></div><h5 id="0x4F-正则表达式实例"><a href="#0x4F-正则表达式实例" class="headerlink" title="0x4F 正则表达式实例"></a>0x4F 正则表达式实例</h5><div class="table-container"><table><thead><tr><th>实例</th><th>描述</th></tr></thead><tbody><tr><td>.</td><td>匹配除”\r\n”之外的任何单个字符。</td></tr><tr><td>[Rr]uby</td><td>匹配 “Ruby” 或 “ruby”</td></tr><tr><td>rub[ye]</td><td>匹配 “ruby” 或 “rube”</td></tr><tr><td>[aeiou]</td><td>匹配小写字母 ：aeiou</td></tr><tr><td>[0-9]</td><td>匹配任何数字，类似 [0123456789]</td></tr><tr><td>[a-z]</td><td>匹配任何 ASCII 小写字母</td></tr><tr><td>[A-Z]</td><td>匹配任何 ASCII 大写字母</td></tr><tr><td>[a-zA-Z0-9]</td><td>匹配数字，大小写字母</td></tr><tr><td><sup><a href="#fn_aeiou" id="reffn_aeiou">aeiou</a></sup></td><td>匹配除了 aeiou 其他字符</td></tr><tr><td><sup><a href="#fn_0-9" id="reffn_0-9">0-9</a></sup></td><td>匹配除了数字的其他字符</td></tr><tr><td>\\d</td><td>匹配数字，类似: [0-9]</td></tr><tr><td>\\D</td><td>匹配非数字，类似: <sup><a href="#fn_0-9" id="reffn_0-9">0-9</a></sup></td></tr><tr><td>\\s</td><td>匹配空格，类似: [ \t\r\n\f]</td></tr><tr><td>\\S</td><td>匹配非空格，类似: <sup><a href="#fn_ \t\r\n\f" id="reffn_ \t\r\n\f"> \t\r\n\f</a></sup></td></tr><tr><td>\\w</td><td>匹配字母，数字，下划线，类似: [A-Za-z0-9_]</td></tr><tr><td>\\W</td><td>匹配非字母，数字，下划线，类似: <sup><a href="#fn_A-Za-z0-9_" id="reffn_A-Za-z0-9_">A-Za-z0-9_</a></sup></td></tr><tr><td>ruby?</td><td>匹配 “rub” 或 “ruby”: y 是可选的</td></tr><tr><td>ruby*</td><td>匹配 “rub” 加上 0 个或多个的 y。</td></tr><tr><td>ruby+</td><td>匹配 “rub” 加上 1 个或多个的 y。</td></tr><tr><td>\\d{3}</td><td>刚好匹配 3 个数字。</td></tr><tr><td>\\d{3,}</td><td>匹配 3 个或多个数字。</td></tr><tr><td>\\d{3,5}</td><td>匹配 3 个、4 个或 5 个数字。</td></tr><tr><td>\\D\\d+</td><td>无分组： + 重复 \d</td></tr><tr><td>(\\D\\d)+/</td><td>分组： + 重复 \D\d 对</td></tr><tr><td>([Rr]uby(, )?)+</td><td>匹配 “Ruby”、”Ruby, ruby, ruby”，等等</td></tr></tbody></table></div><h4 id="0x5-自定义方法"><a href="#0x5-自定义方法" class="headerlink" title="0x5 自定义方法"></a>0x5 自定义方法</h4><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;在Java中通常我们是建立类似StringUtils这种的通用类库，想要在String类中增加一些自定义的方法要怎么做？Java中是无法办到的，在Scala 2.1.0中可以定义隐式转换的类，在这个类中定义自己的方法来实现期望的功能。</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">scala&gt; <span class="keyword">implicit</span> <span class="class"><span class="keyword">class</span> <span class="title">StringImprovement</span>(<span class="params">s:<span class="type">String</span></span>) </span>&#123;</span><br><span class="line">     | <span class="function"><span class="keyword">def</span> <span class="title">increment</span> </span>= s.map(c =&gt; (c.toByte + <span class="number">1</span>).toChar)</span><br><span class="line">     | &#125;</span><br><span class="line">defined <span class="class"><span class="keyword">class</span> <span class="title">StringImprovement</span></span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class"><span class="title">scala&gt;</span> "<span class="title">abc</span>".<span class="title">increment</span></span></span><br><span class="line"><span class="class"><span class="title">res16</span></span>: <span class="type">String</span> = bcd</span><br><span class="line"></span><br><span class="line">scala&gt;</span><br></pre></td></tr></table></figure><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;所以任务String调用的方法都不奇怪，可能某处引用的包中定义了某个隐式转换的类及自定义方法。在Scala2.1.0之前的版本，若想要实现这样的功能，需要定义一个隐式转换的方法：</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">scala&gt;  <span class="class"><span class="keyword">class</span> <span class="title">StringImprovement</span>(<span class="params">s:<span class="type">String</span></span>) </span>&#123;</span><br><span class="line">     | <span class="function"><span class="keyword">def</span> <span class="title">increment</span> </span>= s.map(c =&gt; (c.toByte + <span class="number">1</span>).toChar)</span><br><span class="line">     | &#125;</span><br><span class="line">defined <span class="class"><span class="keyword">class</span> <span class="title">StringImprovement</span></span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class"><span class="title">scala&gt;</span> <span class="title">implicit</span> <span class="title">def</span> <span class="title">stringToString</span>(<span class="params">s:<span class="type">String</span></span>) </span>= <span class="keyword">new</span> <span class="type">StringImprovement</span>(s)</span><br><span class="line">warning: there was one feature warning; re-run <span class="keyword">with</span> -feature <span class="keyword">for</span> details</span><br><span class="line">stringToString: (s: <span class="type">String</span>)<span class="type">StringImprovement</span></span><br><span class="line"></span><br><span class="line">scala&gt; <span class="string">"abc"</span>.increment</span><br><span class="line">res0: <span class="type">String</span> = bcd</span><br><span class="line"></span><br><span class="line">scala&gt;</span><br></pre></td></tr></table></figure><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;如你所见，在Scala中可以创建一个隐式转换的类，将他们引入需要的范围中去，而不需要进行继承，定义一个MyXxxx的新类。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;下面简要描述下其工作原理：</p><ol><li>编译器找到”abc”的字符串常量</li><li>编译器发现要在String调用increment方法</li><li>因为String类中没有increment方法，它开始在当前范围内搜索一个接受String作为参数的隐式转换。</li><li>如此编译器会找到StringImprovement类，在这个类中找到了increment方法</li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;上文中已经介绍了Scala语言中的基本类型，本文着重介绍下字符串的用法，字符串在我们日常开发中经常用到，字符串在Scala中的类型&lt;code&gt;String&lt;/code&gt;，那么Scala中的String和Java中的String有什么关系呢？&lt;/p&gt;
&lt;figure class=&quot;highlight scala&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;scala&amp;gt; &lt;span class=&quot;string&quot;&gt;&quot;Scala&quot;&lt;/span&gt;.getClass.getName&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;res0: &lt;span class=&quot;type&quot;&gt;String&lt;/span&gt; = java.lang.&lt;span class=&quot;type&quot;&gt;String&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;scala&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;本以为Scala是怎样实现了String，上述代码中告诉我们Scala中的&lt;code&gt;String&lt;/code&gt;竟就是Java中的&lt;code&gt;String&lt;/code&gt;。我们接下更深层次的学习&lt;code&gt;String&lt;/code&gt;。&lt;br&gt;&lt;img src=&quot;/images/a311e33c02d299ee621f10649459ac73.png&quot; alt=&quot;a311e33c02d299ee621f10649459ac73&quot;&gt;&lt;br&gt;
    
    </summary>
    
      <category term="1x 技术综合篇" scheme="http://deletee.top/categories/1x-%E6%8A%80%E6%9C%AF%E7%BB%BC%E5%90%88%E7%AF%87/"/>
    
      <category term="1x0 开发语言" scheme="http://deletee.top/categories/1x-%E6%8A%80%E6%9C%AF%E7%BB%BC%E5%90%88%E7%AF%87/1x0-%E5%BC%80%E5%8F%91%E8%AF%AD%E8%A8%80/"/>
    
      <category term="1x01 一起来学Scala" scheme="http://deletee.top/categories/1x-%E6%8A%80%E6%9C%AF%E7%BB%BC%E5%90%88%E7%AF%87/1x0-%E5%BC%80%E5%8F%91%E8%AF%AD%E8%A8%80/1x01-%E4%B8%80%E8%B5%B7%E6%9D%A5%E5%AD%A6Scala/"/>
    
    
      <category term="Scala" scheme="http://deletee.top/tags/Scala/"/>
    
  </entry>
  
  <entry>
    <title>一起来学Scala(2)-基本类型</title>
    <link href="http://deletee.top/2019/01/09/scala-programing-basictype/"/>
    <id>http://deletee.top/2019/01/09/scala-programing-basictype/</id>
    <published>2019-01-09T13:28:50.000Z</published>
    <updated>2019-01-26T13:16:31.779Z</updated>
    
    <content type="html"><![CDATA[<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;上文中已经介绍了Scala语言的入门概要，本文将介绍Scala的基本语法，Scala中有变量、对象、类、方法，在面向对象方面Scala与Java很像，在代码编写风格与Python又很像，除此之外，大家也会碰到一些未曾接触的语法，例如 _  . 等，本文将逐步介绍这些概念。</p><a id="more"></a><h4 id="0x0-基本类型"><a href="#0x0-基本类型" class="headerlink" title="0x0 基本类型"></a>0x0 基本类型</h4><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;我们了解Scala中有哪些基本类型：</p><div class="table-container"><table><thead><tr><th>数据类型</th><th>描述</th></tr></thead><tbody><tr><td>Byte</td><td>8位有符号补码整数。数值区间为 -128 到 127</td></tr><tr><td>Short</td><td>16位有符号补码整数。数值区间为 -32768 到 32767</td></tr><tr><td>Int</td><td>32位有符号补码整数。数值区间为 -2147483648 到 2147483647</td></tr><tr><td>Long</td><td>64位有符号补码整数。数值区间为 -9223372036854775808 到 9223372036854775807</td></tr><tr><td>Float</td><td>32 位, IEEE 754 标准的单精度浮点数</td></tr><tr><td>Double</td><td>64 位 IEEE 754 标准的双精度浮点数</td></tr><tr><td>Char</td><td>16位无符号Unicode字符, 区间值为 U+0000 到 U+FFFF</td></tr><tr><td>String</td><td>字符序列</td></tr><tr><td>Boolean</td><td>true或false</td></tr><tr><td>Unit</td><td>表示无值，和其他语言中void等同。用作不返回任何结果的方法的结果类型。Unit只有一个实例值，写成()。</td></tr><tr><td>Null</td><td>null 或空引用</td></tr><tr><td>Nothing</td><td>Nothing类型在Scala的类层级的最低端；它是任何其他类型的子类型。</td></tr><tr><td>Any</td><td>Any是所有其他类的超类</td></tr><tr><td>AnyRef</td><td>AnyRef类是Scala里所有引用类(reference class)的基类</td></tr></tbody></table></div><p>(摘自<a href="http://www.runoob.com/scala/scala-data-types.html" target="_blank" rel="noopener">Scala基本类型</a>)</p><p>下图展示了基本类型之间的拓扑关系图，Scala中一切皆对象：</p><p><img src="/images/091419398321557.png" alt="091419398321557"></p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> str:<span class="type">String</span> = <span class="string">"Hello Scala"</span></span><br><span class="line"><span class="keyword">var</span> i:<span class="type">Int</span> = <span class="number">10</span></span><br></pre></td></tr></table></figure><p>上述实例中声明了变量str类型是String型，变量值为”Hello Scala”<br>当为变量分配初始值时，Scala编译器可以根据分配给它的值来推断变量的类型。这被称为变量类型推断。 因此，可以编写这样的变量声明 </p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> str = <span class="string">"Hello Scala"</span></span><br><span class="line"><span class="keyword">var</span> i = <span class="number">10</span></span><br></pre></td></tr></table></figure><!--未完待续--><h4 id="0x1-声明变量"><a href="#0x1-声明变量" class="headerlink" title="0x1 声明变量"></a>0x1 声明变量</h4><h5 id="0x10-声明关键字-val-var"><a href="#0x10-声明关键字-val-var" class="headerlink" title="0x10 声明关键字: val,var"></a><strong>0x10 声明关键字</strong>: val,var</h5><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<code>val</code> 用于定义常量，相当于Java中使用final定义一样，<code>val</code>  是value的缩写<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<code>var</code> 用于定义变量，<code>val</code> 是variable的缩写<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;在Scala语言中，使用val定义的变量，是不能够重新赋值的，而var定义的变量是可以重新进行赋值</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">scala&gt; <span class="keyword">val</span> str = <span class="string">"Hello World"</span></span><br><span class="line">str: <span class="type">String</span> = <span class="type">Hello</span> <span class="type">World</span></span><br><span class="line"></span><br><span class="line">scala&gt; str = <span class="string">"Hello Scala"</span></span><br><span class="line">&lt;console&gt;:<span class="number">12</span>: error: reassignment to <span class="keyword">val</span></span><br><span class="line">       str = <span class="string">"Hello Scala"</span></span><br><span class="line">           ^</span><br><span class="line">scala&gt;</span><br></pre></td></tr></table></figure><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">scala&gt; <span class="keyword">var</span> str = <span class="string">"Hello World"</span></span><br><span class="line">str: <span class="type">String</span> = <span class="type">Hello</span> <span class="type">World</span></span><br><span class="line"></span><br><span class="line">scala&gt; str = <span class="string">"Hello Scala"</span></span><br><span class="line">str: <span class="type">String</span> = <span class="type">Hello</span> <span class="type">Scala</span></span><br><span class="line"></span><br><span class="line">scala&gt;</span><br></pre></td></tr></table></figure><h5 id="0x11-多个赋值"><a href="#0x11-多个赋值" class="headerlink" title="0x11 多个赋值"></a>0x11 多个赋值</h5><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Scala支持多个赋值。如果代码块或方法返回一个元组(Tuple - 保持不同类型的对象的集合)，则可以将元组分配给一个<code>val</code>变量。</p><blockquote><p>注：我们将在随后的章节学习元组。</p></blockquote><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> (myVar1: <span class="type">Int</span>, myVar2: <span class="type">String</span>) = <span class="type">Pair</span>(<span class="number">40</span>, <span class="string">"Foo"</span>)</span><br><span class="line"><span class="type">Scala</span></span><br></pre></td></tr></table></figure><p>类型推断得到正确的类型 -</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> (myVar1, myVar2) = <span class="type">Pair</span>(<span class="number">40</span>, <span class="string">"Foo"</span>)</span><br></pre></td></tr></table></figure><h4 id="0x2-变量的作用域"><a href="#0x2-变量的作用域" class="headerlink" title="0x2 变量的作用域"></a>0x2 变量的作用域</h4><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Scala中变量同其他语言类似，有不同的作用域，具体取决于它们被使用的位置。它们可以作为字段存在，作为方法参数和局部变量存在。以下是每种类型范围的详细信息。</p><h5 id="0x20-字段"><a href="#0x20-字段" class="headerlink" title="0x20 字段"></a><strong>0x20 字段</strong></h5><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;声明为对象中的字段信息，那么根据需要可使用<code>val</code>或者<code>var</code>，对象中的字段可以被对象中其他方法访问，配合访问修饰符，可以设置外部变量或者对象访问</p><h5 id="0x21-方法参数"><a href="#0x21-方法参数" class="headerlink" title="0x21 方法参数"></a><strong>0x21 方法参数</strong></h5><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;方法或函数入参都是常量，所以定义函数时都是使用<code>val</code>关键字定义，方法的参数是不可变的。</p><h5 id="0x22-局部变量"><a href="#0x22-局部变量" class="headerlink" title="0x22 局部变量"></a><strong>0x22 局部变量</strong></h5><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;局部变量是在方法中声明的变量。局部变量只能从方法内部访问，但如果从方法返回，则您创建的对象可能会转义该方法。局部变量可以是可变的和不可变的类型，可以使用<code>var</code>或<code>val</code>定义。</p><h4 id="0xF-总结"><a href="#0xF-总结" class="headerlink" title="0xF 总结"></a>0xF 总结</h4><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;本文主要介绍了Scala中基本数据类型及变量的声明方法，根据需要选择合适的关键字进行变量定义。<code>var</code> 修饰的对象引用可以改变，<code>val</code>修饰的则不可改变，但对象的状态却是可以改变的，即表示对于一个对象，通过 val 初始化对象后，该对象是不能够改变的，但是如果对象中有<code>var</code>声明的字段，那么是可以修改对象字段值，实现对象状态的改变。</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span>(<span class="params">n: <span class="type">Int</span></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> value = n</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span>(<span class="params">n: <span class="type">Int</span></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">val</span> value = <span class="keyword">new</span> <span class="type">A</span>(n)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]) &#123;</span><br><span class="line">    <span class="keyword">val</span> x = <span class="keyword">new</span> <span class="type">B</span>(<span class="number">5</span>)</span><br><span class="line">    x = <span class="keyword">new</span> <span class="type">B</span>(<span class="number">6</span>) <span class="comment">// 错误，因为 x 为 val 修饰的，引用不可改变</span></span><br><span class="line">    x.value = <span class="keyword">new</span> <span class="type">A</span>(<span class="number">6</span>) <span class="comment">// 错误，因为 x.value 为 val 修饰的，引用不可改变</span></span><br><span class="line">    x.value.value = <span class="number">6</span> <span class="comment">// 正确，x.value.value 为var 修饰的，可以重新赋值</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// --------------------- </span></span><br><span class="line"><span class="comment">// 作者：GuaKin_Huang </span></span><br><span class="line"><span class="comment">// 来源：CSDN </span></span><br><span class="line"><span class="comment">// 原文：https://blog.csdn.net/a1234h/article/details/77962536 </span></span><br><span class="line"><span class="comment">// 版权声明：本文为博主原创文章，转载请附上博文链接！</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;上文中已经介绍了Scala语言的入门概要，本文将介绍Scala的基本语法，Scala中有变量、对象、类、方法，在面向对象方面Scala与Java很像，在代码编写风格与Python又很像，除此之外，大家也会碰到一些未曾接触的语法，例如 _  . 等，本文将逐步介绍这些概念。&lt;/p&gt;
    
    </summary>
    
      <category term="1x 技术综合篇" scheme="http://deletee.top/categories/1x-%E6%8A%80%E6%9C%AF%E7%BB%BC%E5%90%88%E7%AF%87/"/>
    
      <category term="1x0 开发语言" scheme="http://deletee.top/categories/1x-%E6%8A%80%E6%9C%AF%E7%BB%BC%E5%90%88%E7%AF%87/1x0-%E5%BC%80%E5%8F%91%E8%AF%AD%E8%A8%80/"/>
    
      <category term="1x01 一起来学Scala" scheme="http://deletee.top/categories/1x-%E6%8A%80%E6%9C%AF%E7%BB%BC%E5%90%88%E7%AF%87/1x0-%E5%BC%80%E5%8F%91%E8%AF%AD%E8%A8%80/1x01-%E4%B8%80%E8%B5%B7%E6%9D%A5%E5%AD%A6Scala/"/>
    
    
      <category term="Scala" scheme="http://deletee.top/tags/Scala/"/>
    
  </entry>
  
  <entry>
    <title>常用的一些SQL语句</title>
    <link href="http://deletee.top/2019/01/09/useful-sql/"/>
    <id>http://deletee.top/2019/01/09/useful-sql/</id>
    <published>2019-01-09T13:05:30.000Z</published>
    <updated>2019-01-26T13:17:04.416Z</updated>
    
    <content type="html"><![CDATA[<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;实际工作过程中，经常用的几个SQL，常常因为某些关键字忘记，从而经常需要找工具书或者之前做的工程，本文将自己工作中常常容易忘记的SQL整理出来，方便直接定位。</p><h4 id="0x0-建表DDL-指定分隔符、分区"><a href="#0x0-建表DDL-指定分隔符、分区" class="headerlink" title="0x0 建表DDL(指定分隔符、分区)"></a>0x0 建表DDL(指定分隔符、分区)</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> dim.dim_sms_rate_standard</span><br><span class="line">(</span><br><span class="line">     contry_code <span class="keyword">string</span> <span class="keyword">comment</span> <span class="string">'国家码'</span></span><br><span class="line">    ,contry_en_name <span class="keyword">string</span> <span class="keyword">comment</span> <span class="string">'国家英文名'</span></span><br><span class="line">    ,contry_brief_name <span class="keyword">string</span> <span class="keyword">comment</span> <span class="string">'国家简码'</span></span><br><span class="line">    ,sms_price <span class="built_in">float</span> <span class="keyword">comment</span> <span class="string">'短信单价'</span></span><br><span class="line">)</span><br><span class="line"><span class="keyword">row</span> <span class="keyword">format</span> <span class="keyword">delimited</span> </span><br><span class="line"><span class="keyword">fields</span> <span class="keyword">terminated</span> <span class="keyword">by</span> <span class="string">'\t'</span></span><br><span class="line"><span class="keyword">partition</span>(dt <span class="keyword">string</span> <span class="keyword">comment</span> <span class="string">'日期'</span>);</span><br></pre></td></tr></table></figure><a id="more"></a><h4 id="0x1-设置压缩格式"><a href="#0x1-设置压缩格式" class="headerlink" title="0x1 设置压缩格式"></a>0x1 设置压缩格式</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">set</span> hive.exec.compress.output=<span class="literal">true</span>;</span><br><span class="line"><span class="keyword">set</span> mapred.output.compression.codec=com.hadoop.compression.lzo.LzopCodec;</span><br></pre></td></tr></table></figure><h4 id="0x2-查看外表分区路径"><a href="#0x2-查看外表分区路径" class="headerlink" title="0x2 查看外表分区路径"></a>0x2 查看外表分区路径</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">desc formatted dim.dim_sms_rate_standard partition(dt='2019-01-08');</span><br></pre></td></tr></table></figure><h4 id="0x3-动态分区"><a href="#0x3-动态分区" class="headerlink" title="0x3 动态分区"></a>0x3 动态分区</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">set</span> hive.exec.dynamic.partition=<span class="literal">true</span>;</span><br><span class="line"><span class="keyword">set</span> hive.exec.dynamic.partition.mode=nonstrict; </span><br><span class="line"><span class="keyword">SET</span> hive.exec.max.dynamic.partitions=<span class="number">100000</span>;</span><br><span class="line"><span class="keyword">SET</span> hive.exec.max.dynamic.partitions.pernode=<span class="number">100000</span>;</span><br></pre></td></tr></table></figure><h4 id="0xF-未完待续"><a href="#0xF-未完待续" class="headerlink" title="0xF 未完待续"></a>0xF 未完待续</h4>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;实际工作过程中，经常用的几个SQL，常常因为某些关键字忘记，从而经常需要找工具书或者之前做的工程，本文将自己工作中常常容易忘记的SQL整理出来，方便直接定位。&lt;/p&gt;
&lt;h4 id=&quot;0x0-建表DDL-指定分隔符、分区&quot;&gt;&lt;a href=&quot;#0x0-建表DDL-指定分隔符、分区&quot; class=&quot;headerlink&quot; title=&quot;0x0 建表DDL(指定分隔符、分区)&quot;&gt;&lt;/a&gt;0x0 建表DDL(指定分隔符、分区)&lt;/h4&gt;&lt;figure class=&quot;highlight sql&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;create&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;table&lt;/span&gt; dim.dim_sms_rate_standard&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;(&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     contry_code &lt;span class=&quot;keyword&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;comment&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&#39;国家码&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    ,contry_en_name &lt;span class=&quot;keyword&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;comment&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&#39;国家英文名&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    ,contry_brief_name &lt;span class=&quot;keyword&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;comment&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&#39;国家简码&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    ,sms_price &lt;span class=&quot;built_in&quot;&gt;float&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;comment&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&#39;短信单价&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;row&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;format&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;delimited&lt;/span&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;fields&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;terminated&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;by&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&#39;\t&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;partition&lt;/span&gt;(dt &lt;span class=&quot;keyword&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;comment&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&#39;日期&#39;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="1x 技术综合篇" scheme="http://deletee.top/categories/1x-%E6%8A%80%E6%9C%AF%E7%BB%BC%E5%90%88%E7%AF%87/"/>
    
      <category term="1x2 技术平台" scheme="http://deletee.top/categories/1x-%E6%8A%80%E6%9C%AF%E7%BB%BC%E5%90%88%E7%AF%87/1x2-%E6%8A%80%E6%9C%AF%E5%B9%B3%E5%8F%B0/"/>
    
      <category term="1x21 Hive" scheme="http://deletee.top/categories/1x-%E6%8A%80%E6%9C%AF%E7%BB%BC%E5%90%88%E7%AF%87/1x2-%E6%8A%80%E6%9C%AF%E5%B9%B3%E5%8F%B0/1x21-Hive/"/>
    
    
      <category term="Hive" scheme="http://deletee.top/tags/Hive/"/>
    
      <category term="SQL" scheme="http://deletee.top/tags/SQL/"/>
    
  </entry>
  
  <entry>
    <title>一起来学Scala(1)-入门概要</title>
    <link href="http://deletee.top/2019/01/07/scala-programing-brief/"/>
    <id>http://deletee.top/2019/01/07/scala-programing-brief/</id>
    <published>2019-01-07T14:35:50.000Z</published>
    <updated>2019-01-26T13:16:38.276Z</updated>
    
    <content type="html"><![CDATA[<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;为什么要学Scala？Scala是大数据分析平台Spark、Flink 官方支持的语言，在学习Spark和Flink之前，需要学好Scala基础。Scala同样是一门当前热门的语言，Kafka、Spark均由Scala开发，由此学习Scala是学习这些平台比不可少的步骤。</p><p><img src="/images/a311e33c02d299ee621f10649459ac73.png" alt="a311e33c02d299ee621f10649459ac73"></p><a id="more"></a><h3 id="0x0-Scala基本定义"><a href="#0x0-Scala基本定义" class="headerlink" title="0x0 Scala基本定义"></a>0x0 Scala基本定义</h3><p>Scala 是一门多范式（multi-paradigm）的编程语言，设计初衷是要集成面向对象编程和函数式编程的各种特性。<br>Scala 运行在Java虚拟机上，并兼容现有的Java程序。<br>Scala 源代码被编译成Java字节码，所以它可以运行于JVM之上，并可以调用现有的Java类库，由而Java同样可以调用Scala的类库。Scala语言 使用 JDK &amp; Scala SDK </p><h3 id="0x1-Scala的运行方式"><a href="#0x1-Scala的运行方式" class="headerlink" title="0x1 Scala的运行方式"></a>0x1 Scala的运行方式</h3><p>开发Scala程序之前需要安装<a href="https://www.scala-lang.org/" target="_blank" rel="noopener">Scala</a> </p><h4 id="0x10-脚本运行"><a href="#0x10-脚本运行" class="headerlink" title="0x10 脚本运行"></a>0x10 脚本运行</h4><p>Scala也是一种脚本式语言，可以将Scala程序写入一个脚本，直接执行</p><p>如下是第一个 Scala程序:HelloWorld.scala</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">HelloWorld</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args:<span class="type">Array</span>[<span class="type">String</span>])&#123;</span><br><span class="line">        println(<span class="string">"Hello World"</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用命令:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">~$:scala HelloWorld.scala</span><br><span class="line">Hello World</span><br></pre></td></tr></table></figure><h4 id="0x11-编译执行"><a href="#0x11-编译执行" class="headerlink" title="0x11 编译执行"></a>0x11 编译执行</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">~$:scalac HelloWorld.scala</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将会得到如下两个 class文件，即为 Java字节码</span></span><br><span class="line">HewlloWorld$.class</span><br><span class="line">HewlloWorld.class</span><br></pre></td></tr></table></figure><p>执行方式与执行javaclass类同</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">~$:scala HelloWorld</span><br><span class="line">Hello World</span><br></pre></td></tr></table></figure><h3 id="0xF-总结"><a href="#0xF-总结" class="headerlink" title="0xF 总结"></a>0xF 总结</h3><p>Scala 的语法相对Python而言是比较晦涩，后续尽量以简单清晰的实例，从而达到更好的效果。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;为什么要学Scala？Scala是大数据分析平台Spark、Flink 官方支持的语言，在学习Spark和Flink之前，需要学好Scala基础。Scala同样是一门当前热门的语言，Kafka、Spark均由Scala开发，由此学习Scala是学习这些平台比不可少的步骤。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/a311e33c02d299ee621f10649459ac73.png&quot; alt=&quot;a311e33c02d299ee621f10649459ac73&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="1x 技术综合篇" scheme="http://deletee.top/categories/1x-%E6%8A%80%E6%9C%AF%E7%BB%BC%E5%90%88%E7%AF%87/"/>
    
      <category term="1x0 开发语言" scheme="http://deletee.top/categories/1x-%E6%8A%80%E6%9C%AF%E7%BB%BC%E5%90%88%E7%AF%87/1x0-%E5%BC%80%E5%8F%91%E8%AF%AD%E8%A8%80/"/>
    
      <category term="1x01 一起来学Scala" scheme="http://deletee.top/categories/1x-%E6%8A%80%E6%9C%AF%E7%BB%BC%E5%90%88%E7%AF%87/1x0-%E5%BC%80%E5%8F%91%E8%AF%AD%E8%A8%80/1x01-%E4%B8%80%E8%B5%B7%E6%9D%A5%E5%AD%A6Scala/"/>
    
    
      <category term="Scala" scheme="http://deletee.top/tags/Scala/"/>
    
  </entry>
  
  <entry>
    <title>awk的基本使用方法</title>
    <link href="http://deletee.top/2019/01/06/awk-basic/"/>
    <id>http://deletee.top/2019/01/06/awk-basic/</id>
    <published>2019-01-06T07:46:30.000Z</published>
    <updated>2019-01-27T14:58:15.110Z</updated>
    
    <content type="html"><![CDATA[<h3 id="0x0-简介"><a href="#0x0-简介" class="headerlink" title="0x0 简介"></a><strong>0x0 简介</strong></h3><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;awk是一个强大的文本分析工具，相对于grep的查找，sed的编辑，awk在其对数据分析并生成报告时，显得尤为强大。简单来说awk就是把文件逐行的读入，以空格为默认分隔符将每行切片，切开的部分再进行各种分析处理。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;awk有3个不同版本: awk、nawk和gawk，未作特别说明，一般指gawk，gawk 是 AWK 的 GNU 版本。<br><a id="more"></a><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;awk其名称得自于它的创始人 Alfred Aho 、Peter Weinberger 和 Brian Kernighan 姓氏的首个字母。实际上 AWK 的确拥有自己的语言： AWK 程序设计语言 ， 三位创建者已将它正式定义为“样式扫描和处理语言”。它允许您创建简短的程序，这些程序读取输入文件、为数据排序、处理数据、对输入执行计算以及生成报表，还有无数其他的功能。</p><h3 id="0x1-使用方法"><a href="#0x1-使用方法" class="headerlink" title="0x1 使用方法"></a>0x1 使用方法</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">awk '&#123;pattern + action&#125;' &#123;filenames&#125;</span><br></pre></td></tr></table></figure><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;通常，awk是以文件的一行为处理单位的。awk每接收文件的一行，然后执行相应的命令，来处理文本。awk 有如下三种使用方式</p><h4 id="0x10-命令行方式"><a href="#0x10-命令行方式" class="headerlink" title="0x10 命令行方式"></a>0x10 命令行方式</h4><figure class="highlight shell"><figcaption><span>awk [-F field-separatir] 'commands' input-file </span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">awk [-F field-separatir] 'commands' input-file</span><br></pre></td></tr></table></figure><p>此种方式为最常用的一种方式，-F 是将文件按指定分隔符进行切割。</p><h4 id="0x11-shell脚本方式"><a href="#0x11-shell脚本方式" class="headerlink" title="0x11 shell脚本方式"></a>0x11 shell脚本方式</h4><p>将所有的awk命令插入一个文件，并使awk程序可执行，然后awk命令解释器作为脚本的首行，一遍通过键入脚本名称来调用。<br>相当于shell脚本首行的：#!/bin/sh<br>可以换成：#!/bin/awk</p><h4 id="0x12-将所有的awk命令插入一个单独文件，然后调用："><a href="#0x12-将所有的awk命令插入一个单独文件，然后调用：" class="headerlink" title="0x12 将所有的awk命令插入一个单独文件，然后调用："></a>0x12 将所有的awk命令插入一个单独文件，然后调用：</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">awk -f awk-script-file input-file(s)</span><br></pre></td></tr></table></figure><p>其中，-f选项加载awk-script-file中的awk脚本，input-file(s)跟上面的是一样的。</p><h3 id="0x2-入门实例"><a href="#0x2-入门实例" class="headerlink" title="0x2 入门实例"></a>0x2 入门实例</h3><h4 id="0x20-分隔符"><a href="#0x20-分隔符" class="headerlink" title="0x20 分隔符"></a>0x20 分隔符</h4><p>例如：a.txt</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">1 2 3</span><br><span class="line">1 2 3</span><br></pre></td></tr></table></figure><p>awk 默认支持分隔符，例如 空格，制表符，如下两种方式等价</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">awk -F&apos; &apos; &apos;&#123;print $1&#125;&apos; a.txt</span><br><span class="line">awk &apos;&#123;print $1&#125;&apos; a.txt</span><br></pre></td></tr></table></figure><p>$0变量是指整条记录。$1表示当前行的第一个域,$2表示当前行的第二个域,……以此类推。</p><p>例如： b.txt</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">1,2,3</span><br><span class="line">3,4,5</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">awk -F&apos;,&apos; &apos;&#123;print $1&#125;&apos;</span><br><span class="line">1</span><br><span class="line">3</span><br></pre></td></tr></table></figure><h4 id="0x21-BEGIN-amp-END"><a href="#0x21-BEGIN-amp-END" class="headerlink" title="0x21  BEGIN &amp; END"></a>0x21  BEGIN &amp; END</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">cat /etc/passwd \</span><br><span class="line">|awk  -F ':'  'BEGIN &#123;print "name,shell"&#125;  &#123;print $1","$7&#125; END &#123;print "blue,/bin/nosh"&#125;'</span><br><span class="line">name,shell</span><br><span class="line">root,/bin/bash</span><br><span class="line">daemon,/bin/sh</span><br><span class="line">bin,/bin/sh</span><br><span class="line">sys,/bin/sh</span><br><span class="line">....</span><br><span class="line">blue,/bin/nosh</span><br></pre></td></tr></table></figure><p>BEGIN 是在处理数据行之前进行的操作</p><p>END 则是在数据行处理之后进行的操作</p><p>例如：c.txt 求第一列的总和</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">1,2,3</span><br><span class="line">3,4,5</span><br><span class="line">4,5,6</span><br><span class="line">7,8,9</span><br></pre></td></tr></table></figure><p><strong>命令如下：</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">awk -F<span class="string">','</span> <span class="string">'BEGIN &#123;sum=0&#125; sum+=$1 END &#123;print "sum = "sum&#125;'</span></span><br></pre></td></tr></table></figure><p>BEGIN 声明一个sum 初始化值为0 的变量，END 将变量输出</p><h3 id="0x3-awk内置变量"><a href="#0x3-awk内置变量" class="headerlink" title="0x3 awk内置变量"></a>0x3 awk内置变量</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">ARGC               命令行参数个数</span><br><span class="line">ARGV               命令行参数排列</span><br><span class="line">ENVIRON            支持队列中系统环境变量的使用</span><br><span class="line">FILENAME           awk浏览的文件名</span><br><span class="line">FNR                浏览文件的记录数</span><br><span class="line">FS                 设置输入域分隔符，等价于命令行 -F选项</span><br><span class="line">NF                 浏览记录的域的个数</span><br><span class="line">NR                 已读的记录数</span><br><span class="line">OFS                输出域分隔符</span><br><span class="line">ORS                输出记录分隔符</span><br><span class="line">RS                 控制记录分隔符</span><br></pre></td></tr></table></figure><h3 id="0x4-awk-编程"><a href="#0x4-awk-编程" class="headerlink" title="0x4 awk 编程"></a>0x4 awk 编程</h3><p>awk 可在内部实现丰富的编程</p><p><strong>条件语句</strong></p><p> awk中的条件语句是从C语言中借鉴来的，见如下声明方式：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">if (expression) &#123;</span><br><span class="line">    statement;</span><br><span class="line">    statement;</span><br><span class="line">    ... ...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">if (expression) &#123;</span><br><span class="line">    statement;</span><br><span class="line">&#125; else &#123;</span><br><span class="line">    statement2;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">if (expression) &#123;</span><br><span class="line">    statement1;</span><br><span class="line">&#125; else if (expression1) &#123;</span><br><span class="line">    statement2;</span><br><span class="line">&#125; else &#123;</span><br><span class="line">    statement3;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>例如：统计某个文件夹下的文件占用的字节数,过滤4096大小的文件(一般都是文件夹):</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ls -l |awk 'BEGIN &#123;size=0;print "[start]size is ", size&#125; &#123;if($5!=4096)&#123;size=size+$5;&#125;&#125; END&#123;print "[end]size is ", size/1024/1024,"M"&#125;' </span><br><span class="line">[end]size is  8.22339 M</span><br></pre></td></tr></table></figure><p><strong>循环语句</strong></p><p>awk中的循环语句同样借鉴于C语言，支持while、do/while、for、break、continue，这些关键字的语义和C语言中的语义完全相同。</p><p><strong>数组</strong></p><p>  因为awk中数组的下标可以是数字和字母，数组的下标通常被称为关键字(key)。值和关键字都存储在内部的一张针对key/value应用hash的表格里。由于hash不是顺序存储，因此在显示数组内容时会发现，它们并不是按照你预料的顺序显示出来的。数组和变量一样，都是在使用时自动创建的，awk也同样会自动判断其存储的是数字还是字符串。一般而言，awk中的数组用来从记录中收集信息，可以用于计算总和、统计单词以及跟踪模板被匹配的次数等等。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">awk -F ':' 'BEGIN &#123;count=0;&#125; &#123;name[count] = $1;count++;&#125;; END&#123;for (i = 0; i &lt; NR; i++) print i, name[i]&#125;' /etc/passwd</span><br><span class="line">0 root</span><br><span class="line">1 daemon</span><br><span class="line">2 bin</span><br><span class="line">3 sys</span><br><span class="line">4 sync</span><br><span class="line">5 games</span><br><span class="line">......</span><br></pre></td></tr></table></figure><p>awk编程的内容极多，这里只罗列简单常用的用法，更多请参考：<a href="http://www.gnu.org/software/gawk/manual/gawk.html" target="_blank" rel="noopener">gawk</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;0x0-简介&quot;&gt;&lt;a href=&quot;#0x0-简介&quot; class=&quot;headerlink&quot; title=&quot;0x0 简介&quot;&gt;&lt;/a&gt;&lt;strong&gt;0x0 简介&lt;/strong&gt;&lt;/h3&gt;&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;awk是一个强大的文本分析工具，相对于grep的查找，sed的编辑，awk在其对数据分析并生成报告时，显得尤为强大。简单来说awk就是把文件逐行的读入，以空格为默认分隔符将每行切片，切开的部分再进行各种分析处理。&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;awk有3个不同版本: awk、nawk和gawk，未作特别说明，一般指gawk，gawk 是 AWK 的 GNU 版本。&lt;br&gt;
    
    </summary>
    
      <category term="1x 技术综合篇" scheme="http://deletee.top/categories/1x-%E6%8A%80%E6%9C%AF%E7%BB%BC%E5%90%88%E7%AF%87/"/>
    
      <category term="1x0 开发语言" scheme="http://deletee.top/categories/1x-%E6%8A%80%E6%9C%AF%E7%BB%BC%E5%90%88%E7%AF%87/1x0-%E5%BC%80%E5%8F%91%E8%AF%AD%E8%A8%80/"/>
    
      <category term="1x00 一起来学Shell" scheme="http://deletee.top/categories/1x-%E6%8A%80%E6%9C%AF%E7%BB%BC%E5%90%88%E7%AF%87/1x0-%E5%BC%80%E5%8F%91%E8%AF%AD%E8%A8%80/1x00-%E4%B8%80%E8%B5%B7%E6%9D%A5%E5%AD%A6Shell/"/>
    
    
      <category term="shell" scheme="http://deletee.top/tags/shell/"/>
    
      <category term="awk" scheme="http://deletee.top/tags/awk/"/>
    
  </entry>
  
  <entry>
    <title>数据仓库工程师学习路线</title>
    <link href="http://deletee.top/2019/01/05/edw-need-learning/"/>
    <id>http://deletee.top/2019/01/05/edw-need-learning/</id>
    <published>2019-01-05T07:46:30.000Z</published>
    <updated>2019-01-26T13:15:35.044Z</updated>
    
    <content type="html"><![CDATA[<p>刚看了木东居士关于《<a href="http://www.mdjs.info/2018/10/26/learn-for-resume/#more" target="_blank" rel="noopener">聊一聊如何面向简历学习</a>》，有一些感触，每每思考到职业发展总是有一种恐慌，因为我们很多时候都忘了梦想，甚至根本没有梦想，也就谈不上规划，今天是思考和整理下自己的学习路线。写下自己的想法及规划。</p><blockquote><p>你是否担心互联网寒冬中首先淘汰的那波人就有自己？你是否感觉到自己缺乏核心竞争力？是否感觉已经很久没有学习成长？</p></blockquote><a id="more"></a><p>&nbsp; &nbsp; &nbsp; &nbsp;一个数据仓库工程师或者数据开发人员，需要掌握什么技能？数据仓库应该分为四类：建模方法论，实施方法论、数据管理方法论、数据应用，所以我们将木东居士的内容整理了一下，如下：</p><div class="table-container"><table><thead><tr><th>主题</th><th>内容</th><th>时间</th></tr></thead><tbody><tr><td>数据建模</td><td>常用数据仓库模型原理总结</td><td>1 周</td></tr><tr><td>数据建模</td><td>维度建模原理</td><td>1 周</td></tr><tr><td>数据建模</td><td>以淘宝的场景为例设计一套数据模型</td><td>1 周</td></tr><tr><td>数据建模</td><td>时间维表设计</td><td>1 周</td></tr><tr><td>数据管理</td><td>元数据管理</td><td>1 周</td></tr><tr><td>数据管理</td><td>数据质量监控设计</td><td>1 周</td></tr><tr><td>数据管理</td><td>数据血缘分析</td><td>1 周</td></tr><tr><td>数据管理</td><td>作业监控设计</td><td>1 周</td></tr><tr><td>数据应用</td><td>OLap分析原理+Kylin实践</td><td>3 周</td></tr><tr><td>数据应用</td><td>数据分层设计</td><td>1 周</td></tr><tr><td>大数据平台</td><td>Hive（基本用法、高阶函数用法、Hive优化）</td><td>2 周</td></tr><tr><td>大数据平台</td><td>Hive 执行过程原理</td><td>1 周</td></tr><tr><td>大数据平台</td><td>Hadoop 常用命令</td><td>1 周</td></tr><tr><td>大数据平台</td><td>HBase 基本用法，原理</td><td>2 周</td></tr><tr><td>大数据平台</td><td>Spark 常用命令</td><td>1 周</td></tr><tr><td>大数据平台</td><td>Flink 基本用法，原理</td><td>2 周</td></tr><tr><td>大数据平台</td><td>Kafka 基本用法，原理</td><td>2 周</td></tr><tr><td>脚本语言</td><td>Python</td><td>2 周</td></tr><tr><td>脚本语言</td><td>Scala</td><td>2 周</td></tr><tr><td>论文阅读</td><td>Google 的 Goods 论文阅读（数据管理）</td><td>1 周</td></tr></tbody></table></div><p>在日常工作中，并不是所有技术都有在使用，往往没有使用的技术或方法论，则容易被我们忘记，所以最好的方式，就是写博客或者写PPT，以自己理解的话术表达出来，相信这样的模式会比单纯的记忆一些概念要好很多。</p><p>感谢@木东居士的分享</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;刚看了木东居士关于《&lt;a href=&quot;http://www.mdjs.info/2018/10/26/learn-for-resume/#more&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;聊一聊如何面向简历学习&lt;/a&gt;》，有一些感触，每每思考到职业发展总是有一种恐慌，因为我们很多时候都忘了梦想，甚至根本没有梦想，也就谈不上规划，今天是思考和整理下自己的学习路线。写下自己的想法及规划。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;你是否担心互联网寒冬中首先淘汰的那波人就有自己？你是否感觉到自己缺乏核心竞争力？是否感觉已经很久没有学习成长？&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="1x 技术综合篇" scheme="http://deletee.top/categories/1x-%E6%8A%80%E6%9C%AF%E7%BB%BC%E5%90%88%E7%AF%87/"/>
    
      <category term="1x1 数据仓库" scheme="http://deletee.top/categories/1x-%E6%8A%80%E6%9C%AF%E7%BB%BC%E5%90%88%E7%AF%87/1x1-%E6%95%B0%E6%8D%AE%E4%BB%93%E5%BA%93/"/>
    
      <category term="1x12 其他" scheme="http://deletee.top/categories/1x-%E6%8A%80%E6%9C%AF%E7%BB%BC%E5%90%88%E7%AF%87/1x1-%E6%95%B0%E6%8D%AE%E4%BB%93%E5%BA%93/1x12-%E5%85%B6%E4%BB%96/"/>
    
    
      <category term="数据仓库" scheme="http://deletee.top/tags/%E6%95%B0%E6%8D%AE%E4%BB%93%E5%BA%93/"/>
    
      <category term="学习" scheme="http://deletee.top/tags/%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>awk的高级应用-多目录输出</title>
    <link href="http://deletee.top/2018/12/31/awk-application/"/>
    <id>http://deletee.top/2018/12/31/awk-application/</id>
    <published>2018-12-31T07:46:30.000Z</published>
    <updated>2019-01-26T13:14:31.891Z</updated>
    
    <content type="html"><![CDATA[<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;awk是Shell中三剑客之一，功能十分强大，本文分享的通过一份管道输入，实现多目录输出。原理：awk内部可实现编程，在awk内部将输入流进行预处理后，利用 print ${content} &gt;&gt; ${path}的方式将数据进行分流。</p><p><strong>下面一个实例：</strong></p><blockquote><p>通过HDFS 标准输入流，在awk中根据数据日期时间分流至不同的日期文件夹中。</p></blockquote><a id="more"></a><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/usr/bin/env bash</span></span><br><span class="line"><span class="comment">#***********************************************************************</span></span><br><span class="line"><span class="comment">#脚本功能: 追补历史推送数据</span></span><br><span class="line"><span class="comment">#创建日期: 2016-05-16</span></span><br><span class="line"><span class="comment">#修改纪录：      修改人            修改日期          修改描述</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#----+-----------------+--------------------+--------------------------+</span></span><br><span class="line"><span class="comment">#  1          deletee       2017-10-12            创建</span></span><br><span class="line"><span class="comment">#***********************************************************************</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 环境变量设置</span></span><br><span class="line"><span class="comment">#-------------------------------------------------------</span></span><br><span class="line"><span class="comment"># JOB_HOME：作业目录</span></span><br><span class="line"><span class="comment"># HDFS_PATH :HDFS目录</span></span><br><span class="line"><span class="comment">#-------------------------------------------------------</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Local</span></span><br><span class="line">JOB_HOME=$(<span class="built_in">cd</span> <span class="string">"<span class="variable">$(dirname "$0")</span>"</span>; <span class="built_in">pwd</span>)</span><br><span class="line">JOB_DATA_PATH=<span class="variable">$&#123;JOB_HOME&#125;</span>/data</span><br><span class="line">PROCESSED_FILE_PATH=<span class="variable">$&#123;JOB_HOME&#125;</span>/pro</span><br><span class="line">SECRETS_CONF_PATH=<span class="variable">$&#123;JOB_HOME&#125;</span>/conf</span><br><span class="line">mkdir -p <span class="variable">$&#123;JOB_HOME&#125;</span>/&#123;data,pro,conf&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># HDFS</span></span><br><span class="line">HADOOP_HOME=/home/<span class="variable">$&#123;USER&#125;</span>/software/hadoop</span><br><span class="line">HDFS_PATH=/hdfs/*/some_log/</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#---------------------------</span></span><br><span class="line"><span class="comment"># 函数名:genTargetFileModel</span></span><br><span class="line"><span class="comment"># 功能:生成目标文件模式,遍历HDFS目录，生成日、时、分</span></span><br><span class="line"><span class="comment"># 参数: $1 日期，格式 yyyy-MM-dd</span></span><br><span class="line"><span class="comment"># 返回:无</span></span><br><span class="line"><span class="comment">#---------------------------</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="function"><span class="title">genTargetFileModel</span></span>() &#123;</span><br><span class="line">      <span class="comment"># 遍历日期</span></span><br><span class="line">      ETL_DT=<span class="variable">$1</span></span><br><span class="line">      CUR_HDFS_PATH=`<span class="built_in">echo</span> <span class="variable">$&#123;HDFS_PATH&#125;</span>|sed <span class="string">"s:*:<span class="variable">$&#123;ETL_DT&#125;</span>:"</span>`</span><br><span class="line"></span><br><span class="line">      <span class="keyword">for</span> (( i = 0; i &lt; 24; i++ )); <span class="keyword">do</span></span><br><span class="line">          <span class="keyword">for</span> (( j = 0; j &lt; 12; j++ )); <span class="keyword">do</span></span><br><span class="line">              hour=`<span class="built_in">printf</span> <span class="string">"%02d"</span> <span class="variable">$i</span>`</span><br><span class="line">              minutes=$((j*5))</span><br><span class="line">              minutes=`<span class="built_in">printf</span> <span class="string">"%02d"</span> <span class="variable">$minutes</span>`</span><br><span class="line">              mkdir -p <span class="variable">$&#123;JOB_DATA_PATH&#125;</span>/<span class="variable">$&#123;ETL_DT&#125;</span>/<span class="variable">$&#123;hour&#125;</span>/<span class="variable">$&#123;minutes&#125;</span></span><br><span class="line">          <span class="keyword">done</span></span><br><span class="line">      <span class="keyword">done</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">      <span class="keyword">for</span> path <span class="keyword">in</span> `<span class="variable">$&#123;HADOOP_HOME&#125;</span>/bin/hadoop fs -ls <span class="variable">$&#123;CUR_HDFS_PATH&#125;</span> \</span><br><span class="line">      |awk <span class="string">'&#123;print $8&#125;'</span>`;<span class="keyword">do</span></span><br><span class="line">          <span class="built_in">echo</span> <span class="string">"<span class="variable">$&#123;ETL_DT&#125;</span>:<span class="variable">$&#123;path&#125;</span>"</span> &gt;&gt; <span class="variable">$&#123;PROCESSED_FILE_PATH&#125;</span>/pro_<span class="variable">$&#123;ETL_DT&#125;</span>.txt</span><br><span class="line">          <span class="variable">$&#123;HADOOP_HOME&#125;</span>/bin/hadoop fs -text <span class="variable">$&#123;path&#125;</span> |awk <span class="string">'&#123;</span></span><br><span class="line"><span class="string">              split($0,a," ");</span></span><br><span class="line"><span class="string">              datestr=substr(a[1],11,10);</span></span><br><span class="line"><span class="string">              hourstr=substr(a[2],1,2);</span></span><br><span class="line"><span class="string">              minutestr=substr(a[2],4,2);</span></span><br><span class="line"><span class="string">              minutestr=int(minutestr/5)*5;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">              if(minutestr&lt;10)&#123;</span></span><br><span class="line"><span class="string">                minutestr=("0"minutestr)</span></span><br><span class="line"><span class="string">              &#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">              gsub("\"","",a[3])</span></span><br><span class="line"><span class="string">              split(a[3],b,",");</span></span><br><span class="line"><span class="string">              gsub("&#123;|&#125;","",b[3])</span></span><br><span class="line"><span class="string">              gsub("fields:HOSTNAME:","",b[3])</span></span><br><span class="line"><span class="string">              gsub("\\\\t","\t",b[1])</span></span><br><span class="line"><span class="string">              gsub(";","\t",b[1])</span></span><br><span class="line"><span class="string">              lens=split(b[1],tA,"\t")</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">              if(lens==12)&#123;</span></span><br><span class="line"><span class="string">                re=(b[1]"\t\t\t\t\t\t\t\t\t\t\t\t"b[3])</span></span><br><span class="line"><span class="string">              &#125;</span></span><br><span class="line"><span class="string">              if(lens==15)&#123;</span></span><br><span class="line"><span class="string">                re=(b[1]"\t\t\t\t\t\t\t\t\t"b[3])</span></span><br><span class="line"><span class="string">              &#125;</span></span><br><span class="line"><span class="string">              path=(datestr"/"hourstr"/"minutestr"/log_"datestr"_"hourstr"_"minutestr".txt")</span></span><br><span class="line"><span class="string">              print re &gt;&gt; path</span></span><br><span class="line"><span class="string">          &#125;'</span></span><br><span class="line">      <span class="keyword">done</span></span><br><span class="line">      <span class="built_in">unset</span> ETL_DT</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">#---------------------------</span></span><br><span class="line"><span class="comment"># 函数名:genTargetFileModel</span></span><br><span class="line"><span class="comment"># 功能:生成目标文件模式,遍历HDFS目录，生成日、时、分</span></span><br><span class="line"><span class="comment"># 参数: $1 日期，格式 yyyy-MM-dd</span></span><br><span class="line"><span class="comment"># 返回:无</span></span><br><span class="line"><span class="comment">#---------------------------</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="function"><span class="title">sendByRysnc</span></span>() &#123;</span><br><span class="line">  ETL_DT=<span class="variable">$1</span></span><br><span class="line">  nohup /usr/bin/rsync -avz \</span><br><span class="line">        --bwlimit=30720 \</span><br><span class="line">        --port=873 \</span><br><span class="line">        --progress \</span><br><span class="line">        --password-file=<span class="variable">$&#123;SECRETS_CONF_PATH&#125;</span>/secret.conf <span class="variable">$&#123;JOB_DATA_PATH&#125;</span>/<span class="variable">$&#123;ETL_DT&#125;</span> <span class="variable">$&#123;user&#125;</span>@<span class="variable">$&#123;ip&#125;</span>::<span class="variable">$&#123;module&#125;</span>/<span class="variable">$&#123;path&#125;</span>/ &gt;&gt; rysnc_send_$(date +%Y%m%d).<span class="built_in">log</span> 2&gt;&amp;1 &amp;</span><br><span class="line">  <span class="built_in">unset</span> ETL_DT</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="function"><span class="title">mainStart</span></span>() &#123;</span><br><span class="line">    ETL_DT=<span class="variable">$1</span></span><br><span class="line">    genTargetFileModel <span class="variable">$&#123;ETL_DT&#125;</span></span><br><span class="line">    sendByRysnc <span class="variable">$&#123;ETL_DT&#125;</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">mainStart 2017-09-29</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;awk是Shell中三剑客之一，功能十分强大，本文分享的通过一份管道输入，实现多目录输出。原理：awk内部可实现编程，在awk内部将输入流进行预处理后，利用 print ${content} &amp;gt;&amp;gt; ${path}的方式将数据进行分流。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;下面一个实例：&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;通过HDFS 标准输入流，在awk中根据数据日期时间分流至不同的日期文件夹中。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="1x 技术综合篇" scheme="http://deletee.top/categories/1x-%E6%8A%80%E6%9C%AF%E7%BB%BC%E5%90%88%E7%AF%87/"/>
    
      <category term="1x0 开发语言" scheme="http://deletee.top/categories/1x-%E6%8A%80%E6%9C%AF%E7%BB%BC%E5%90%88%E7%AF%87/1x0-%E5%BC%80%E5%8F%91%E8%AF%AD%E8%A8%80/"/>
    
      <category term="1x00 一起来学Shell" scheme="http://deletee.top/categories/1x-%E6%8A%80%E6%9C%AF%E7%BB%BC%E5%90%88%E7%AF%87/1x0-%E5%BC%80%E5%8F%91%E8%AF%AD%E8%A8%80/1x00-%E4%B8%80%E8%B5%B7%E6%9D%A5%E5%AD%A6Shell/"/>
    
    
      <category term="shell" scheme="http://deletee.top/tags/shell/"/>
    
      <category term="awk" scheme="http://deletee.top/tags/awk/"/>
    
  </entry>
  
  <entry>
    <title>数据仓库专题(5)-维度设计</title>
    <link href="http://deletee.top/2018/12/29/dim-design/"/>
    <id>http://deletee.top/2018/12/29/dim-design/</id>
    <published>2018-12-29T07:46:30.000Z</published>
    <updated>2019-01-26T13:14:53.475Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;都说维度设计是维度建模的灵魂，在维度建模中，我们将度量成为「事实」，将环境描述为「维度」，但是如何设计一个好的维度模型，我们需要遵循一定的技巧和方法。</p><h3 id="如何标识维度？"><a href="#如何标识维度？" class="headerlink" title="如何标识维度？"></a>如何标识维度？</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;通常我们都会问「谁、何时、何地、为何、如何」来描述一个事件过程，同样维度可以理解为一个事件或者业务过程的角度，比如商品购买<br>购买人、购买事件、购买产品、购买使用的设备、购买使用的IP等均为维度范畴</p><a id="more"></a><h3 id="围绕业务流程来构建维度"><a href="#围绕业务流程来构建维度" class="headerlink" title="围绕业务流程来构建维度"></a>围绕业务流程来构建维度</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;考虑到需求总是变换多端，但是有一点不变：需求总是围绕着业务流程，那么当我们设计维度的时候，就需要充分生成丰富的维度及属性</p><h3 id="维度的基本设计方法？"><a href="#维度的基本设计方法？" class="headerlink" title="维度的基本设计方法？"></a>维度的基本设计方法？</h3><p>（1）根据业务流程确定主维度</p><p>​         即在业务过程中找出关键维度作为主维度，在企业级数据仓库中，必需维度的统一口径，以商品为例，有且仅有一个维度定义</p><p>（2）确定相关维度</p><p>（3）确定维度属性</p><ul><li>尽可能生成丰富的维度属性</li><li>尽可能多地给出包括一些富有意义的文字性描述<br>​         维度建模中较多维度以ID形态存在，例如：商品ID，但是单一的ID在业务描述非常欠缺，通常ID的含义描述也随ID作为维度设计中的一部分</li><li>区分数值型属性和事实<br>​       在一些业务数据中，一些数值型字段是作为维度还是作为度量（事实）</li><li>尽量沉淀出通用的维度属性<br>​        有些维度属性值获取是经过了复杂的逻辑处理，或者是通过解析某个字段得到，或是多张表关联得到，当设计出负责的维度时，若不保留原生维度，将难以覆盖业务的变化<br>​        并且属性值格式做到统一，比如某模型A时间格式为 yyyy-MM-dd HH:mm:ss，而模型B中的时间格式 则是 Unix Timestamp，同样也将造成口径不一致</li></ul><p><strong>理解关键字：维度设计需要严格遵循开发规范，对字段命名、含义、口径、属性值格式的规范，需严格遵循。</strong></p><h3 id="常见维度设计方法"><a href="#常见维度设计方法" class="headerlink" title="常见维度设计方法"></a>常见维度设计方法</h3><hr><p><strong>（1）缓慢变化或快速变化</strong></p><p>​         维度缓慢变化</p><ul><li>修改维度属性值      不保留历史操作，适用于无需关心历史维度值的情形。</li><li>插入一行                 保留历史操作，由于多了新记录，使得维度关联时，会产生冗余记录，增加额外学习成本</li><li>插入一列                 预留一列作为上一次维度值的保留，适用于只需要查看上一次的维度值情形</li><li>快照维度                 即将每天的变更存储为一个快照，在维度表较小时，可以忽略存储</li><li>极限存储                 通过拉链表的形式，记录维度的缓慢变化，但是注意，维度表中有频繁变化的字段。</li></ul><p>​         维度快速变化</p><p>​         <strong>此类问题又称微型维度，</strong>主要是为了解决快变超大维度（rapidly changing monster dimension）,顾名思义，在某些维度表中，大量维度进行缓慢变化甚至没有变化，但是有少量的维度频繁的发生变化，此种情形下，若使用缓慢变化的方式进行处理的话，将消耗大量资源。由此解决办法是：</p><p>​         将维度属性值频率变化比较高的字段提取出来，建立一个单独的维度表，只需维度这一张快速变化的维度表即可。</p><p><strong>（2）维度的层次结构</strong></p><p>​           <strong>也是通常所说的 规范化和反规范化</strong></p><p>​          在维度设计的过程中，我们经常遇到维度的层次问题，比如：商品通常会有一级分类、二级分类、三级分类此种情形，对于这样的维度处理方式，通常有两种做法：</p><ul><li>星系模型   将维度层次问题扁平化，将层次的维度项进行扁平处理，例如有如下维度：sku_id，category_lv1, category_lv2, category_lv3 …</li><li>雪花模型   将层级维度提炼出来单独作为一张新的维度表</li></ul><p>上文已经阐述过，两种模型的利弊，在新互联网的大数据平台基础上，存储也变的非常廉价，通常是选用星系模型解决维度层次的问题</p><p>（3）维度一致性</p><p>In data warehousing, a conformed dimension is a dimension that has the same meaning to every fact with which it relates. Conformed dimensions allow facts and measures to be categorized and described in the same way across multiple facts and/or data marts, ensuring consistent reporting across the enterprise.</p><p>​         维度一致性是如此解释的，在数据仓库中，一致的维度是与其相关的每个事实具有相同含义的维度。 一致的维度允许在多个事实和/或数据集市中以相同的方式对事实和度量进行分类和描述，从而确保整个企业的一致报告。</p><p>​         通常在数据仓库开发过程中如何保证维度的一致性呢？</p><ul><li><p>维度的定义需要遵循命名、取值等规范</p></li><li><p>维度需通过元数据进行管理  采用维度建模，意味着建仓过程是自下而上的，各个数据集市各自开发，那么如何保证企业级数据仓库维度一致性，则需要统一的元数据进行管理</p></li></ul><p>维度建模的数据仓库中，有一个概念叫Conformed Dimension，中文一般翻译为“一致性维度”。一致性维度是Kimball的多维体系结构（MD）中的三个关键性概念之一，另两个是总线架构（Bus Architecture）和一致性事实（Conformed Fact）。</p><p>在多维体系结构中，没有物理上的数据仓库，由物理上的数据集市组合成逻辑上的数据仓库。而且数据集市的建立是可以逐步完成的，最终组合在一起，成为一个数据仓库。如果分步建立数据集市的过程出现了问题，数据集市就会变成孤立的集市，不能组合成数据仓库，而一致性维度的提出正式为了解决这个问题。</p><p>一致性维度的范围是总线架构中的维度，即可能会在多个数据集市中都存在的维度，这个范围的选取需要架构师来决定。一致性维度的内容和普通维度并没有本质上区别，都是经过数据清洗和整合后的结果。</p><p>一致性维度建立的地点是多维体系结构的后台（Back Room），即数据准备区。在多维体系结构的数据仓库项目组内需要有专门的维度设计师，他的职责就是建立维度和维护维度的一致性。在后台建立好的维度同步复制到各个数据集市。这样所有数据集市的这部分维度都是完全相同的。建立新的数据集市时，需要在后台进行一致性维度处理，根据情况来决定是否新增和修改一致性维度，然后同步复制到各个数据集市。这是不同数据集市维度保持一致的要点。</p><p>在同一个集市内，一致性维度的意思是两个维度如果有关系，要么就是完全一样的，要么就是一个维度在数学意义上是另一个维度的子集。例如，如果建立月维度话，月维度的各种描述必须与日期维度中的完全一致，最常用的做法就是在日期维度上建立视图生成月维度。这样月维度就可以是日期维度的子集，在后续钻取等操作时可以保持一致。如果维度表中的数据量较大，出于效率的考虑，应该建立物化视图或者实际的物理表。</p><p>这样，维度保持一致后，事实就可以保存在各个数据集市中。虽然在物理上是独立的，但在逻辑上由一致性维度使所有的数据集市是联系在一起，随时可以进行交叉探察等操作，也就组成了数据仓库。</p><p>（4）维度整合和拆分</p><p>​         因为数据仓库的数据源自各个系统，有从移动端，web端，PC端，每个段的数据结构差异较大，即便是同一端，可能因为业务拆分，字段的属性值也不完全一致。</p><p>​         例如：A系统 某字段值用 1/0表示 token是否有效，B系统则使用F/T表示是否有效</p><p>​         那么，在此种情形下，需要进行维度整合。维度整合需要遵循如下规范：</p><ul><li>命名规范统一</li><li>字段类型统一</li><li>属性值编码和含义统一</li></ul><p>​      另外有一种场景，因为系统差异太大，而无法进行维度整合，此时需要进行维度的拆分</p><p>​      例如：加油站主要的商品是则是油，加油站内同样也有零售店，售卖一些日常百货，油 有 92，95，98等维度属性，日常百货的通常 涉及的 进销存，单价等</p><p>​                 两种商品在维度差异过大，通常的做法，加油站的主营业务是售卖油品，从而建立主要的商品维度表，另外建立一个零售商品维度记录表</p><p>​      <strong>理解关键词：各个业务差异独特性较大的业务各自建立独立的两个维度表</strong></p><p>（5）杂项维度的处理方法</p><ul><li><strong>退化维度</strong><br>​       所谓退化维度（degenerate dimension），是指在实施表中那些看起来像是一个事实表的一个维度关键字，但实际上没有对应的维度字段。退化维度一般都是事务的编号，如购物小票编号，发票编号</li><li><strong>行为维度</strong><br>​       行为维度是基于过去维度成员的行为进行分组或者过滤事实的办法。行为维度即将事实转化为维度，以确保获得更多的分析能力<br>​       例如：购买次数超过30次，30次至100次，超过100次 作为维度值</li><li><strong>角色维度</strong><br>​       角色维度通常是一个业务活动有多个角色参与，例如：办理银行业务，有客户经理，审批人等参与两个及以上角色，而这些角色均属于员工维度表，对于此种情形，没有必要根据角色建立多个维度表，而是可以通过建立视图的方式达到目的。</li><li><strong>多值维度</strong><br>​       <strong>多值维度一般会出现多对多的关系中，例如：购买房产，会有夫妻两人共同持有，一次下单，多个子订单</strong></li></ul><p>​       有如下三种方法：</p><p>​                1）降低事实表的粒度      每一个事实都标注最小粒度，例如：前台业务与商业智能关注交易子订单，每一个子订单一个事实，只会有一个商品与之对应，很多时候，事实表的粒度是不能降低的，当强行降低之后，那么订单事实则发生改变，对于统计每日订单量计算，则复杂度变高，增加学习和计算成本</p><p>​                2）采用多字段   例如：在买房合同中，标注第一买受人，第二买受人，可顺位增加冗余的字段位</p><p>​               3）使用常用的桥接表      例如：订单中，确定父订单为粒度，建立父订单与子订单的桥接表，另建立子订单与商品的维度关系表，桥接表包含事实表关联的分组KEY，以及作为买受方的维度表外键ID，有多个买受方，则有在相同的KEY下有多条记录，桥接表需要更多的计算，也可能会造成双重计算，例如，买受人1籍贯为山东，买受人2籍贯为浙江，那么当分别统计外地山东的购房数，和浙江的购房数，则产生了多重计算。双重计算不一定是错误，对于一些业务需求是合理的，但对于另一些业务需求，则需要规避。</p><p>​         <strong>理解关键字：</strong>当前大数据平台支持复杂的数据结构，将多个买受人可以作为数据组结构存入一个字段中，使用key:value的形式，当然此种方法需增加一定的计算成本，属于非规范化操作。</p><ul><li><strong>杂项维度（junk dimension）</strong><br>​      <strong>杂项维度就是一种包含的数据具有很少可能值的维度</strong><br>​      <strong>当定义好各种维度后，会发现一些小范围维度取离散值或者标志位的字段，但是这样的维度又很难退化存储在事实表中，可能会造成事实表过大，若果单独建立维度表进行关联，通过外键关联，会出现维度过多的情况，如果将这些字段删除，则业务方不同意。</strong><br> 这时，我们通常的解决方案就是建立杂项维度，将这些字段建立到一个维度表中，在事实表中只需保存一个外键。<strong>几个字段的不同取值组成一条记录，生成代理键，存入维度表</strong>，并将该代理键保存入相应的事实表字段。建议不要直接使用所有的组合生成完整的杂项维度表，在抽取时遇到新的组合时生成相应记录即可。杂项维度的ETL过程比一般的维度略为复杂。</li></ul><p><strong>几个字段的不同取值组成一条记录，生成代理键，存入维度表： 即将几个杂项维度的组合建立杂项维度表，生成一个代理键，植入事实表中</strong>            </p><ul><li><strong>微型维度</strong></li></ul><p><strong>理解关键字2：</strong></p><p>​         <strong>第一：避免维度过度增长     某些维度值变化过高，如果维度表使用了拉链极限存储，那边过度增长或者变化的维度，将使得极限存储效率差</strong></p><p>​         <strong>第二：避免耦合度过高        例如：卖家的主营项目，加工逻辑异常复杂，如果融合进现有的卖家维表中，那么过多的业务耦合将会导致卖家维度难以维护，应适当做维度拆分</strong></p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;都说维度设计是维度建模的灵魂，在维度建模中，我们将度量成为「事实」，将环境描述为「维度」，但是如何设计一个好的维度模型，我们需要遵循一定的技巧和方法。&lt;/p&gt;
&lt;h3 id=&quot;如何标识维度？&quot;&gt;&lt;a href=&quot;#如何标识维度？&quot; class=&quot;headerlink&quot; title=&quot;如何标识维度？&quot;&gt;&lt;/a&gt;如何标识维度？&lt;/h3&gt;&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;通常我们都会问「谁、何时、何地、为何、如何」来描述一个事件过程，同样维度可以理解为一个事件或者业务过程的角度，比如商品购买&lt;br&gt;购买人、购买事件、购买产品、购买使用的设备、购买使用的IP等均为维度范畴&lt;/p&gt;
    
    </summary>
    
      <category term="1x 技术综合篇" scheme="http://deletee.top/categories/1x-%E6%8A%80%E6%9C%AF%E7%BB%BC%E5%90%88%E7%AF%87/"/>
    
      <category term="1x1 数据仓库" scheme="http://deletee.top/categories/1x-%E6%8A%80%E6%9C%AF%E7%BB%BC%E5%90%88%E7%AF%87/1x1-%E6%95%B0%E6%8D%AE%E4%BB%93%E5%BA%93/"/>
    
      <category term="1x11 数据建模" scheme="http://deletee.top/categories/1x-%E6%8A%80%E6%9C%AF%E7%BB%BC%E5%90%88%E7%AF%87/1x1-%E6%95%B0%E6%8D%AE%E4%BB%93%E5%BA%93/1x11-%E6%95%B0%E6%8D%AE%E5%BB%BA%E6%A8%A1/"/>
    
    
      <category term="建模" scheme="http://deletee.top/tags/%E5%BB%BA%E6%A8%A1/"/>
    
      <category term="数据仓库" scheme="http://deletee.top/tags/%E6%95%B0%E6%8D%AE%E4%BB%93%E5%BA%93/"/>
    
  </entry>
  
  <entry>
    <title>数据仓库专题(4)-维度建模</title>
    <link href="http://deletee.top/2018/12/28/dim-modeling/"/>
    <id>http://deletee.top/2018/12/28/dim-modeling/</id>
    <published>2018-12-28T07:46:30.000Z</published>
    <updated>2019-01-26T13:14:58.978Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1、什么是维度建模？"><a href="#1、什么是维度建模？" class="headerlink" title="1、什么是维度建模？"></a>1、什么是维度建模？</h3><p><strong>理解关键字：</strong>维度建模的出发点是实现快速的数据分析与决策，维度建模通常面向业务人员、分析人员使用，相对ER建模来说会更加开放，更容易理解</p><p>维度建模是从业务过程中提炼而来，典型维度建表代表星形建模和雪花建模<br><a id="more"></a></p><h3 id="2、维度建模一般过程（摘自《大数据之路》-amp-《离线和实时大数据之战》）"><a href="#2、维度建模一般过程（摘自《大数据之路》-amp-《离线和实时大数据之战》）" class="headerlink" title="2、维度建模一般过程（摘自《大数据之路》 &amp; 《离线和实时大数据之战》）"></a>2、维度建模一般过程（摘自《大数据之路》 &amp; 《离线和实时大数据之战》）</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Kimball四步建模流程适合上述数据仓库系统建设流程中模型设计环节，重点解决数据粒度、维度设计和事实表设计问题。</p><p>（1）选择业务过程</p><p>​          业务过程描述的是企业的业务活动，例如电商系统用户下单，账号系统用户注册了一个账号</p><p>（2）选择粒度</p><p>​           那么什么是粒度呢？粒度是描述的是活动细节的每一个子项，例如，用户注册一个账号，包含了用户名、时间、IP、终端类型、手机号码，帐号类型等</p><p>（3）确定维度</p><p>​           确定维度之前，需要先明确什么是维度？维度是表示业务活动在不同角度的表现方式，例如：注册账号的活动中，从时间、IP、终端类型等角度进行描述</p><p>​           比如：用户名、注册时间、注册IP、注册终端、注册手机号码、注册账号类型（手机账号、邮箱账号、三方账号）</p><p>（4）确定事实</p><p>​          确定维度之后，事实则变的清晰，比如：我们需要计算某终端、某天的注册量</p><p>那么问题来了？</p><hr><p>1、如何确定粒度？</p><p>​             最细粒度和聚合粒度之争？ 到底是选择最细粒度，还是聚合粒度？</p><p>2、如何确定维度？</p><p>​             标识维度解决的是业务人员如何描述来自业务过程的数据，维度用来表示“谁、什么、何时、何处、为何、如何”的问题。以竞价广告检索流程而言就是客户通过什么渠道、什么样的客户端（OS、IP）、检索了什么样的内容、请求最终有谁受理等。</p><p>3、如何确定事实？</p><p>​             标识事实其实是在确定业务过程的度量指标，指标何来？哪些指标必须保留，那些指标必须删除，待定指标如何处理？<strong>必须综合考虑业务用户需求和现实数据的实际情况</strong>。事实表的设计完全依赖于物理活动，不受可能产生的最终报表的影响，报表只是事实表设计的参考视角。</p><p>​            <strong>指标必需要考虑业务的需求和数据的实际情况</strong></p><h3 id="3、雪花模型-与-星形模型"><a href="#3、雪花模型-与-星形模型" class="headerlink" title="3、雪花模型 与 星形模型"></a>3、雪花模型 与 星形模型</h3><p><strong>理解关键字：时间与空间交换</strong></p><p><strong>（1）雪花模型是充分展开维度，当出现维度层次时，例如：某商品分大类、种类、小类，使用雪花模型建模时，通常将维度表中记录小类的ID，额外设计一张类别的维度表</strong></p><p><strong>雪花模型去除了数据冗余，节省了部分存储，但也带来了一定的不变，使得业务人员分析查询时需要关联多张维度表。</strong></p><p><strong>（2）星系模型则是允许一定的冗余，将维度层次扁平化，通过牺牲一小部分空间换取查询时快捷</strong></p><p>PS:某些情况下可以需要用到雪花模型</p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;1、什么是维度建模？&quot;&gt;&lt;a href=&quot;#1、什么是维度建模？&quot; class=&quot;headerlink&quot; title=&quot;1、什么是维度建模？&quot;&gt;&lt;/a&gt;1、什么是维度建模？&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;理解关键字：&lt;/strong&gt;维度建模的出发点是实现快速的数据分析与决策，维度建模通常面向业务人员、分析人员使用，相对ER建模来说会更加开放，更容易理解&lt;/p&gt;
&lt;p&gt;维度建模是从业务过程中提炼而来，典型维度建表代表星形建模和雪花建模&lt;br&gt;
    
    </summary>
    
      <category term="1x 技术综合篇" scheme="http://deletee.top/categories/1x-%E6%8A%80%E6%9C%AF%E7%BB%BC%E5%90%88%E7%AF%87/"/>
    
      <category term="1x1 数据仓库" scheme="http://deletee.top/categories/1x-%E6%8A%80%E6%9C%AF%E7%BB%BC%E5%90%88%E7%AF%87/1x1-%E6%95%B0%E6%8D%AE%E4%BB%93%E5%BA%93/"/>
    
      <category term="1x11 数据建模" scheme="http://deletee.top/categories/1x-%E6%8A%80%E6%9C%AF%E7%BB%BC%E5%90%88%E7%AF%87/1x1-%E6%95%B0%E6%8D%AE%E4%BB%93%E5%BA%93/1x11-%E6%95%B0%E6%8D%AE%E5%BB%BA%E6%A8%A1/"/>
    
    
      <category term="建模" scheme="http://deletee.top/tags/%E5%BB%BA%E6%A8%A1/"/>
    
      <category term="数据仓库" scheme="http://deletee.top/tags/%E6%95%B0%E6%8D%AE%E4%BB%93%E5%BA%93/"/>
    
      <category term="维度" scheme="http://deletee.top/tags/%E7%BB%B4%E5%BA%A6/"/>
    
  </entry>
  
  <entry>
    <title>数据仓库专题(3)-ER建模</title>
    <link href="http://deletee.top/2018/12/27/er-modeling/"/>
    <id>http://deletee.top/2018/12/27/er-modeling/</id>
    <published>2018-12-27T07:46:30.000Z</published>
    <updated>2019-01-26T13:15:39.901Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1、什么是ER建模？"><a href="#1、什么是ER建模？" class="headerlink" title="1、什么是ER建模？"></a>1、什么是ER建模？</h3><p><strong>理解关键字：ER模型又称实体-关系模型，遵循3NF建模，采用ER进行数据仓库建模需要从整个企业的角度理清各业务之间的关系，建模的出发点是基于企业数据的整合，建设EDW需要建模人员对企业整体业务有精深的把控</strong></p><p>例如：Teradata的 FS-LDM模型，将金融业务分为10大主题，通常是对整体行业发展的沉淀，将成熟的模型做适当的调整即可快速落地实施<br><a id="more"></a></p><h3 id="2、ER建模的三个阶段"><a href="#2、ER建模的三个阶段" class="headerlink" title="2、ER建模的三个阶段"></a><strong>2、ER建模的三个阶段</strong></h3><p><strong>理解关键字：ER模型是自上而下的建模方式，由此建模的需要先从企业的整体框架进行高度抽象</strong></p><p><strong>（1）高层模型</strong><br>​         一个高度抽象的模型，描述主要的主题及主体间的关系，用于描述企业的总体情况<br><strong>（2）中层模型</strong><br>​         在高层模型的基础上，细化主题域的实体、关系等数据项<br><strong>（3）物理模型</strong><br>​        在中层模型的基础上，通常会根据平台的特性进行物理属性设计，例如：分表、分区、分区索引等设计<br><strong>理解关键字2：先通过整合整个企业的业务关系，划分相应主题域及对应的主题之间的关系，再细化每个主题域中的内容，最后是根据平台的特点进行物理设计</strong></p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;1、什么是ER建模？&quot;&gt;&lt;a href=&quot;#1、什么是ER建模？&quot; class=&quot;headerlink&quot; title=&quot;1、什么是ER建模？&quot;&gt;&lt;/a&gt;1、什么是ER建模？&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;理解关键字：ER模型又称实体-关系模型，遵循3NF建模，采用ER进行数据仓库建模需要从整个企业的角度理清各业务之间的关系，建模的出发点是基于企业数据的整合，建设EDW需要建模人员对企业整体业务有精深的把控&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;例如：Teradata的 FS-LDM模型，将金融业务分为10大主题，通常是对整体行业发展的沉淀，将成熟的模型做适当的调整即可快速落地实施&lt;br&gt;
    
    </summary>
    
      <category term="1x 技术综合篇" scheme="http://deletee.top/categories/1x-%E6%8A%80%E6%9C%AF%E7%BB%BC%E5%90%88%E7%AF%87/"/>
    
      <category term="1x1 数据仓库" scheme="http://deletee.top/categories/1x-%E6%8A%80%E6%9C%AF%E7%BB%BC%E5%90%88%E7%AF%87/1x1-%E6%95%B0%E6%8D%AE%E4%BB%93%E5%BA%93/"/>
    
      <category term="1x11 数据建模" scheme="http://deletee.top/categories/1x-%E6%8A%80%E6%9C%AF%E7%BB%BC%E5%90%88%E7%AF%87/1x1-%E6%95%B0%E6%8D%AE%E4%BB%93%E5%BA%93/1x11-%E6%95%B0%E6%8D%AE%E5%BB%BA%E6%A8%A1/"/>
    
    
      <category term="建模" scheme="http://deletee.top/tags/%E5%BB%BA%E6%A8%A1/"/>
    
      <category term="数据仓库" scheme="http://deletee.top/tags/%E6%95%B0%E6%8D%AE%E4%BB%93%E5%BA%93/"/>
    
      <category term="ER" scheme="http://deletee.top/tags/ER/"/>
    
  </entry>
  
  <entry>
    <title>数据仓库专题(2)-数据建模</title>
    <link href="http://deletee.top/2018/12/26/data-modeling/"/>
    <id>http://deletee.top/2018/12/26/data-modeling/</id>
    <published>2018-12-26T07:46:30.000Z</published>
    <updated>2019-01-26T13:14:46.419Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1、为什么需要数据建模？"><a href="#1、为什么需要数据建模？" class="headerlink" title="1、为什么需要数据建模？"></a>1、为什么需要数据建模？</h2><p>理解关键字：数据建模就是数据组织和存储的方法<br>数据模型是数据组织和存储方法，正如我们希望图书馆的书分门别类的放置。<br>数据模型强调从业务、数据存取和使用角度合理规划数据</p><p>那么为什么需要数据建模呢？我们可以从建模有哪些好处理解</p><a id="more"></a><p>（1）性能 良好的模型能帮助我们快速查询所需要的数据，减少不必要的数据查询I/O<br>（2）成本 良好的数据模型能够极大地减少不必要的数据存储，也能实现计算结果的复用，极大地降低大数据系统中的存储和计算成本<br>（3）效率 良好的数据模型能够极大地提高用户体验，用户可通过业务沉淀后的模型尽可能减少不必要的查询，从而提高效率<br>（4）质量 良好的数据模型将遵循一定的数据规范（例如：口径约束，字段约束等）从而减少数据计算的失误，保障数据质量</p><h2 id="2、OLTP与OLAP的区别"><a href="#2、OLTP与OLAP的区别" class="headerlink" title="2、OLTP与OLAP的区别"></a>2、OLTP与OLAP的区别</h2><p>理解关键字：</p><p> OLTP 是讲究事务，在OLAP中事务不是所关注的，主要是批量的读写，致力于联机分析<br> 一个是讲究快速响应，一个是讲究大吞吐<br>OLTP通常使用ER模型，采用三范式消除数据中的冗余，而OLAP采用的模型则比较丰富</p><h2 id="3、有哪些建模方法论？"><a href="#3、有哪些建模方法论？" class="headerlink" title="3、有哪些建模方法论？"></a>3、有哪些建模方法论？</h2><p>（1）ER建模<br>（2）维度建模<br>（3）Data vault建模<br>（4）Anchor建模</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;1、为什么需要数据建模？&quot;&gt;&lt;a href=&quot;#1、为什么需要数据建模？&quot; class=&quot;headerlink&quot; title=&quot;1、为什么需要数据建模？&quot;&gt;&lt;/a&gt;1、为什么需要数据建模？&lt;/h2&gt;&lt;p&gt;理解关键字：数据建模就是数据组织和存储的方法&lt;br&gt;数据模型是数据组织和存储方法，正如我们希望图书馆的书分门别类的放置。&lt;br&gt;数据模型强调从业务、数据存取和使用角度合理规划数据&lt;/p&gt;
&lt;p&gt;那么为什么需要数据建模呢？我们可以从建模有哪些好处理解&lt;/p&gt;
    
    </summary>
    
      <category term="1x 技术综合篇" scheme="http://deletee.top/categories/1x-%E6%8A%80%E6%9C%AF%E7%BB%BC%E5%90%88%E7%AF%87/"/>
    
      <category term="1x1 数据仓库" scheme="http://deletee.top/categories/1x-%E6%8A%80%E6%9C%AF%E7%BB%BC%E5%90%88%E7%AF%87/1x1-%E6%95%B0%E6%8D%AE%E4%BB%93%E5%BA%93/"/>
    
      <category term="1x11 数据建模" scheme="http://deletee.top/categories/1x-%E6%8A%80%E6%9C%AF%E7%BB%BC%E5%90%88%E7%AF%87/1x1-%E6%95%B0%E6%8D%AE%E4%BB%93%E5%BA%93/1x11-%E6%95%B0%E6%8D%AE%E5%BB%BA%E6%A8%A1/"/>
    
    
      <category term="建模" scheme="http://deletee.top/tags/%E5%BB%BA%E6%A8%A1/"/>
    
      <category term="数据仓库" scheme="http://deletee.top/tags/%E6%95%B0%E6%8D%AE%E4%BB%93%E5%BA%93/"/>
    
  </entry>
  
</feed>
